ARM GAS  build/m3.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"m3.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "src/m3.c"
  20              		.section	.rodata.advancePointer.str1.4,"aMS",%progbits,1
  21              		.align	2
  22              	.LC0:
  23 0000 6D794275 		.ascii	"myBuff\000"
  23      666600
  24 0007 00       		.align	2
  25              	.LC1:
  26 0008 7372632F 		.ascii	"src/circbuffer.h\000"
  26      63697263 
  26      62756666 
  26      65722E68 
  26      00
  27              		.section	.text.advancePointer,"ax",%progbits
  28              		.align	1
  29              		.syntax unified
  30              		.thumb
  31              		.thumb_func
  33              	advancePointer:
  34              	.LVL0:
  35              	.LFB8:
  36              		.file 2 "src/circbuffer.h"
   1:src/circbuffer.h **** #ifndef CIRCBUFFER_H
   2:src/circbuffer.h ****     #define CIRCBUFFER_h
   3:src/circbuffer.h ****     #include <assert.h>
   4:src/circbuffer.h ****     #include <stdbool.h>
   5:src/circbuffer.h **** 
   6:src/circbuffer.h **** 
   7:src/circbuffer.h **** typedef struct circbuffer{
   8:src/circbuffer.h ****     char* buffer;
   9:src/circbuffer.h ****     uint8_t headIndex;
  10:src/circbuffer.h ****     uint8_t tailIndex;
  11:src/circbuffer.h ****     bool isFull;
  12:src/circbuffer.h ****     uint8_t max;
  13:src/circbuffer.h **** }circbuffer;
  14:src/circbuffer.h **** 
  15:src/circbuffer.h **** void circbuffer_reset(circbuffer* myBuff){
  16:src/circbuffer.h ****     assert(myBuff);
  17:src/circbuffer.h **** 
ARM GAS  build/m3.s 			page 2


  18:src/circbuffer.h ****     myBuff->headIndex = 0;
  19:src/circbuffer.h ****     myBuff->tailIndex = 0;
  20:src/circbuffer.h ****     myBuff->isFull = false;
  21:src/circbuffer.h **** }
  22:src/circbuffer.h **** 
  23:src/circbuffer.h **** bool bufferIsEmpty(circbuffer* myBuff ){
  24:src/circbuffer.h ****     assert(myBuff);
  25:src/circbuffer.h **** 
  26:src/circbuffer.h ****     return(!myBuff->isFull && (myBuff->headIndex == myBuff->tailIndex));
  27:src/circbuffer.h **** }
  28:src/circbuffer.h **** 
  29:src/circbuffer.h **** void circbuffer_init(circbuffer* myBuff, char* buff, int size){
  30:src/circbuffer.h ****     assert(myBuff && buff && size);
  31:src/circbuffer.h ****     
  32:src/circbuffer.h ****     myBuff->buffer = buff;
  33:src/circbuffer.h ****     myBuff->max = size;
  34:src/circbuffer.h ****     circbuffer_reset(myBuff);
  35:src/circbuffer.h **** 
  36:src/circbuffer.h ****     assert(bufferIsEmpty(myBuff));
  37:src/circbuffer.h **** }
  38:src/circbuffer.h **** 
  39:src/circbuffer.h **** bool bufferIsFull(circbuffer* myBuff){
  40:src/circbuffer.h ****     assert(myBuff);
  41:src/circbuffer.h ****     return myBuff->isFull;
  42:src/circbuffer.h **** }
  43:src/circbuffer.h **** 
  44:src/circbuffer.h **** uint8_t circbuff_entries(circbuffer* myBuff){
  45:src/circbuffer.h ****     assert(myBuff);
  46:src/circbuffer.h **** 
  47:src/circbuffer.h **** 	uint8_t size = myBuff->max;
  48:src/circbuffer.h **** 
  49:src/circbuffer.h **** 	if(!myBuff->isFull){
  50:src/circbuffer.h **** 	
  51:src/circbuffer.h ****     	if(myBuff->headIndex >= myBuff->tailIndex)
  52:src/circbuffer.h **** 			size = myBuff->headIndex - myBuff->tailIndex;
  53:src/circbuffer.h **** 		else
  54:src/circbuffer.h **** 			size = myBuff->max + myBuff->headIndex - myBuff->tailIndex;
  55:src/circbuffer.h **** 	}
  56:src/circbuffer.h **** 	
  57:src/circbuffer.h ****     return size;
  58:src/circbuffer.h **** }
  59:src/circbuffer.h **** 
  60:src/circbuffer.h **** 
  61:src/circbuffer.h **** static void advancePointer(circbuffer* myBuff){
  37              		.loc 2 61 47 view -0
  38              		.cfi_startproc
  39              		@ args = 0, pretend = 0, frame = 0
  40              		@ frame_needed = 0, uses_anonymous_args = 0
  41              		.loc 2 61 47 is_stmt 0 view .LVU1
  42 0000 08B5     		push	{r3, lr}
  43              	.LCFI0:
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 3, -8
  46              		.cfi_offset 14, -4
  62:src/circbuffer.h ****     assert(myBuff);
  47              		.loc 2 62 4 is_stmt 1 view .LVU2
  48              		.loc 2 62 16 is_stmt 0 view .LVU3
ARM GAS  build/m3.s 			page 3


  49 0002 C0B1     		cbz	r0, .L6
  50 0004 0346     		mov	r3, r0
  63:src/circbuffer.h **** 
  64:src/circbuffer.h ****     if(myBuff->isFull){
  51              		.loc 2 64 5 is_stmt 1 view .LVU4
  52              		.loc 2 64 14 is_stmt 0 view .LVU5
  53 0006 8279     		ldrb	r2, [r0, #6]	@ zero_extendqisi2
  54              		.loc 2 64 7 view .LVU6
  55 0008 32B1     		cbz	r2, .L3
  65:src/circbuffer.h ****         if(++(myBuff->headIndex) == myBuff->tailIndex){
  56              		.loc 2 65 9 is_stmt 1 view .LVU7
  57              		.loc 2 65 21 is_stmt 0 view .LVU8
  58 000a 0279     		ldrb	r2, [r0, #4]	@ zero_extendqisi2
  59              		.loc 2 65 12 view .LVU9
  60 000c 0132     		adds	r2, r2, #1
  61 000e D2B2     		uxtb	r2, r2
  62              		.loc 2 65 11 view .LVU10
  63 0010 0271     		strb	r2, [r0, #4]
  64              		.loc 2 65 43 view .LVU11
  65 0012 4179     		ldrb	r1, [r0, #5]	@ zero_extendqisi2
  66              		.loc 2 65 11 view .LVU12
  67 0014 8A42     		cmp	r2, r1
  68 0016 14D0     		beq	.L7
  69              	.L3:
  66:src/circbuffer.h ****             myBuff->tailIndex = 0;
  67:src/circbuffer.h ****         }
  68:src/circbuffer.h ****     }
  69:src/circbuffer.h **** 
  70:src/circbuffer.h ****     if(++(myBuff->headIndex) == myBuff->max){
  70              		.loc 2 70 5 is_stmt 1 view .LVU13
  71              		.loc 2 70 17 is_stmt 0 view .LVU14
  72 0018 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
  73              		.loc 2 70 8 view .LVU15
  74 001a 0132     		adds	r2, r2, #1
  75 001c D2B2     		uxtb	r2, r2
  76              		.loc 2 70 7 view .LVU16
  77 001e 1A71     		strb	r2, [r3, #4]
  78              		.loc 2 70 39 view .LVU17
  79 0020 D979     		ldrb	r1, [r3, #7]	@ zero_extendqisi2
  80              		.loc 2 70 7 view .LVU18
  81 0022 8A42     		cmp	r2, r1
  82 0024 10D0     		beq	.L8
  83              	.L4:
  71:src/circbuffer.h ****         myBuff->headIndex = 0;
  72:src/circbuffer.h ****     }
  73:src/circbuffer.h **** 
  74:src/circbuffer.h ****     myBuff->isFull = (myBuff->headIndex == myBuff->tailIndex);
  84              		.loc 2 74 5 is_stmt 1 view .LVU19
  85              		.loc 2 74 29 is_stmt 0 view .LVU20
  86 0026 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
  87              		.loc 2 74 50 view .LVU21
  88 0028 5979     		ldrb	r1, [r3, #5]	@ zero_extendqisi2
  89              		.loc 2 74 41 view .LVU22
  90 002a 8A42     		cmp	r2, r1
  91 002c 14BF     		ite	ne
  92 002e 0022     		movne	r2, #0
  93 0030 0122     		moveq	r2, #1
ARM GAS  build/m3.s 			page 4


  94              		.loc 2 74 20 view .LVU23
  95 0032 9A71     		strb	r2, [r3, #6]
  75:src/circbuffer.h **** }
  96              		.loc 2 75 1 view .LVU24
  97 0034 08BD     		pop	{r3, pc}
  98              	.L6:
  62:src/circbuffer.h **** 
  99              		.loc 2 62 18 discriminator 1 view .LVU25
 100 0036 064B     		ldr	r3, .L9
 101 0038 064A     		ldr	r2, .L9+4
 102 003a 3E21     		movs	r1, #62
 103 003c 0648     		ldr	r0, .L9+8
 104              	.LVL1:
  62:src/circbuffer.h **** 
 105              		.loc 2 62 18 discriminator 1 view .LVU26
 106 003e FFF7FEFF 		bl	__assert_func
 107              	.LVL2:
 108              	.L7:
  66:src/circbuffer.h ****         }
 109              		.loc 2 66 13 is_stmt 1 view .LVU27
  66:src/circbuffer.h ****         }
 110              		.loc 2 66 31 is_stmt 0 view .LVU28
 111 0042 0022     		movs	r2, #0
 112 0044 4271     		strb	r2, [r0, #5]
 113 0046 E7E7     		b	.L3
 114              	.L8:
  71:src/circbuffer.h ****     }
 115              		.loc 2 71 9 is_stmt 1 view .LVU29
  71:src/circbuffer.h ****     }
 116              		.loc 2 71 27 is_stmt 0 view .LVU30
 117 0048 0022     		movs	r2, #0
 118 004a 1A71     		strb	r2, [r3, #4]
 119 004c EBE7     		b	.L4
 120              	.L10:
 121 004e 00BF     		.align	2
 122              	.L9:
 123 0050 00000000 		.word	.LC0
 124 0054 00000000 		.word	__func__.8
 125 0058 08000000 		.word	.LC1
 126              		.cfi_endproc
 127              	.LFE8:
 129              		.section	.text.backPointer,"ax",%progbits
 130              		.align	1
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 135              	backPointer:
 136              	.LVL3:
 137              	.LFB9:
  76:src/circbuffer.h **** 
  77:src/circbuffer.h **** static void backPointer(circbuffer* myBuff){
 138              		.loc 2 77 44 is_stmt 1 view -0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		.loc 2 77 44 is_stmt 0 view .LVU32
 143 0000 08B5     		push	{r3, lr}
ARM GAS  build/m3.s 			page 5


 144              	.LCFI1:
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 3, -8
 147              		.cfi_offset 14, -4
  78:src/circbuffer.h ****     assert(myBuff);
 148              		.loc 2 78 4 is_stmt 1 view .LVU33
 149              		.loc 2 78 16 is_stmt 0 view .LVU34
 150 0002 48B1     		cbz	r0, .L15
  79:src/circbuffer.h **** 
  80:src/circbuffer.h ****     myBuff->isFull = false;
 151              		.loc 2 80 5 is_stmt 1 view .LVU35
 152              		.loc 2 80 20 is_stmt 0 view .LVU36
 153 0004 0023     		movs	r3, #0
 154 0006 8371     		strb	r3, [r0, #6]
  81:src/circbuffer.h **** 
  82:src/circbuffer.h ****     if(++(myBuff->tailIndex) == myBuff->max){
 155              		.loc 2 82 5 is_stmt 1 view .LVU37
 156              		.loc 2 82 17 is_stmt 0 view .LVU38
 157 0008 4379     		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 158              		.loc 2 82 8 view .LVU39
 159 000a 0133     		adds	r3, r3, #1
 160 000c DBB2     		uxtb	r3, r3
 161              		.loc 2 82 7 view .LVU40
 162 000e 4371     		strb	r3, [r0, #5]
 163              		.loc 2 82 39 view .LVU41
 164 0010 C179     		ldrb	r1, [r0, #7]	@ zero_extendqisi2
 165              		.loc 2 82 7 view .LVU42
 166 0012 8B42     		cmp	r3, r1
 167 0014 06D0     		beq	.L16
 168              	.L11:
  83:src/circbuffer.h ****         myBuff->tailIndex = 0;
  84:src/circbuffer.h ****     }
  85:src/circbuffer.h **** }
 169              		.loc 2 85 1 view .LVU43
 170 0016 08BD     		pop	{r3, pc}
 171              	.L15:
  78:src/circbuffer.h **** 
 172              		.loc 2 78 18 discriminator 1 view .LVU44
 173 0018 044B     		ldr	r3, .L17
 174 001a 054A     		ldr	r2, .L17+4
 175 001c 4E21     		movs	r1, #78
 176 001e 0548     		ldr	r0, .L17+8
 177              	.LVL4:
  78:src/circbuffer.h **** 
 178              		.loc 2 78 18 discriminator 1 view .LVU45
 179 0020 FFF7FEFF 		bl	__assert_func
 180              	.LVL5:
 181              	.L16:
  83:src/circbuffer.h ****         myBuff->tailIndex = 0;
 182              		.loc 2 83 9 is_stmt 1 view .LVU46
  83:src/circbuffer.h ****         myBuff->tailIndex = 0;
 183              		.loc 2 83 27 is_stmt 0 view .LVU47
 184 0024 0023     		movs	r3, #0
 185 0026 4371     		strb	r3, [r0, #5]
 186              		.loc 2 85 1 view .LVU48
 187 0028 F5E7     		b	.L11
 188              	.L18:
ARM GAS  build/m3.s 			page 6


 189 002a 00BF     		.align	2
 190              	.L17:
 191 002c 00000000 		.word	.LC0
 192 0030 00000000 		.word	__func__.6
 193 0034 08000000 		.word	.LC1
 194              		.cfi_endproc
 195              	.LFE9:
 197              		.section	.text.clock_enable,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 203              	clock_enable:
 204              	.LFB13:
 205              		.file 3 "src/embsysS20.h"
   1:src/embsysS20.h **** /*
   2:src/embsysS20.h ****     Name: Tate Wieber
   3:src/embsysS20.h ****     Course: Embedded Systems
   4:src/embsysS20.h ****     Date: 2/24/23
   5:src/embsysS20.h ****     Desciption: Header File for GPIO Pin & Ports
   6:src/embsysS20.h **** */
   7:src/embsysS20.h **** 
   8:src/embsysS20.h **** 
   9:src/embsysS20.h **** #ifndef EMBSYSS20_H
  10:src/embsysS20.h **** #define EMBSYSS20_H
  11:src/embsysS20.h **** 
  12:src/embsysS20.h **** #ifndef STM32L4
  13:src/embsysS20.h ****   #define STM32L4
  14:src/embsysS20.h **** #endif
  15:src/embsysS20.h **** 
  16:src/embsysS20.h **** /**********************INCLUDES*****************/
  17:src/embsysS20.h **** #include <errno.h>
  18:src/embsysS20.h **** #include <stdio.h>
  19:src/embsysS20.h **** #include <unistd.h>
  20:src/embsysS20.h **** #include <libopencm3/stm32/rcc.h>
  21:src/embsysS20.h **** #include <libopencm3/stm32/gpio.h>
  22:src/embsysS20.h **** #include <libopencm3/stm32/usart.h>
  23:src/embsysS20.h **** #include <libopencm3/stm32/timer.h>
  24:src/embsysS20.h **** #include <libopencm3/cm3/nvic.h>
  25:src/embsysS20.h **** #include "circbuffer.h"
  26:src/embsysS20.h **** 
  27:src/embsysS20.h **** 
  28:src/embsysS20.h **** // All LED 2 Defines
  29:src/embsysS20.h **** #define     LD2_PORT        GPIOA
  30:src/embsysS20.h **** #define     LD2_PIN         GPIO5
  31:src/embsysS20.h **** #define     LD2_RCC         RCC_GPIOA
  32:src/embsysS20.h **** 
  33:src/embsysS20.h **** // All Button 1 Defines
  34:src/embsysS20.h **** #define     B1_PORT         GPIOC
  35:src/embsysS20.h **** #define     B1_PIN          GPIO13
  36:src/embsysS20.h **** #define     B1_RCC          RCC_GPIOC
  37:src/embsysS20.h **** 
  38:src/embsysS20.h **** //Cipher Define
  39:src/embsysS20.h **** const char key[21]= {'B', 'O' , 'L', 'D', 'F', 'E', 'A', 'R', 'L', 'E', 'S', 'S', 'C', 'O', 'N', 'F
  40:src/embsysS20.h **** 
  41:src/embsysS20.h **** //Buffer init
  42:src/embsysS20.h **** struct circbuffer circBufferIn;
ARM GAS  build/m3.s 			page 7


  43:src/embsysS20.h **** struct circbuffer circBufferOut;
  44:src/embsysS20.h **** char bufferI[256];
  45:src/embsysS20.h **** char bufferO[256];
  46:src/embsysS20.h **** 
  47:src/embsysS20.h **** uint16_t globalPeriod = 1000;
  48:src/embsysS20.h **** 
  49:src/embsysS20.h **** // Functions
  50:src/embsysS20.h **** 
  51:src/embsysS20.h **** //LED2 interaction functions; Set, Clear, and Toggle
  52:src/embsysS20.h **** #define TURN_ON_LD2 gpio_set(LD2_PORT, LD2_PIN)
  53:src/embsysS20.h **** #define TURN_OFF_LD2 gpio_clear(LD2_PORT, LD2_PIN)
  54:src/embsysS20.h **** #define TOGGLE_LD2 gpio_toggle(LD2_PORT, LD2_PIN)
  55:src/embsysS20.h **** 
  56:src/embsysS20.h **** //LED2 status functions; Check if on and check if off
  57:src/embsysS20.h **** #define IS_LD2_SET gpio_get(LD2_PORT, LD2_PIN)
  58:src/embsysS20.h **** #define IS_LD2_RESET !gpio_get(LD2_PORT, LD2_PIN)
  59:src/embsysS20.h **** 
  60:src/embsysS20.h **** //Button 1 status functions; Check if pressed and check if off
  61:src/embsysS20.h **** #define IS_B1_PRESSED !gpio_get(B1_PORT, B1_PIN)
  62:src/embsysS20.h **** #define IS_B1_RELEASED gpio_get(B1_PORT, B1_PIN)
  63:src/embsysS20.h **** 
  64:src/embsysS20.h **** /******INITALIZATION FUNCTIONS*********/
  65:src/embsysS20.h **** static void clock_enable(void){
 206              		.loc 3 65 31 is_stmt 1 view -0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210 0000 10B5     		push	{r4, lr}
 211              	.LCFI2:
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 4, -8
 214              		.cfi_offset 14, -4
 215 0002 82B0     		sub	sp, sp, #8
 216              	.LCFI3:
 217              		.cfi_def_cfa_offset 16
  66:src/embsysS20.h **** 
  67:src/embsysS20.h ****     rcc_osc_on(RCC_HSI16);
 218              		.loc 3 67 5 view .LVU50
 219 0004 0220     		movs	r0, #2
 220 0006 FFF7FEFF 		bl	rcc_osc_on
 221              	.LVL6:
  68:src/embsysS20.h ****   //main clock initializtion to 40MHz
  69:src/embsysS20.h **** 	/* 16MHz / 4 = > 4 * 20 = 80MHz / 2 = VCO => 40MHz main pll  */
  70:src/embsysS20.h **** 	rcc_set_main_pll(RCC_PLLCFGR_PLLSRC_HSI16, 4, 40, 0, 0, RCC_PLLCFGR_PLLR_DIV2);
 222              		.loc 3 70 2 view .LVU51
 223 000a 0024     		movs	r4, #0
 224 000c 0194     		str	r4, [sp, #4]
 225 000e 0094     		str	r4, [sp]
 226 0010 2346     		mov	r3, r4
 227 0012 2822     		movs	r2, #40
 228 0014 0421     		movs	r1, #4
 229 0016 0220     		movs	r0, #2
 230 0018 FFF7FEFF 		bl	rcc_set_main_pll
 231              	.LVL7:
  71:src/embsysS20.h **** 	rcc_osc_on(RCC_PLL);
 232              		.loc 3 71 2 view .LVU52
 233 001c 2046     		mov	r0, r4
ARM GAS  build/m3.s 			page 8


 234 001e FFF7FEFF 		bl	rcc_osc_on
 235              	.LVL8:
  72:src/embsysS20.h ****    rcc_periph_clock_enable(RCC_TIM2);
 236              		.loc 3 72 4 view .LVU53
 237 0022 4FF43060 		mov	r0, #2816
 238 0026 FFF7FEFF 		bl	rcc_periph_clock_enable
 239              	.LVL9:
  73:src/embsysS20.h ****    rcc_periph_clock_enable(RCC_GPIOA);
 240              		.loc 3 73 4 view .LVU54
 241 002a 4FF41860 		mov	r0, #2432
 242 002e FFF7FEFF 		bl	rcc_periph_clock_enable
 243              	.LVL10:
  74:src/embsysS20.h ****    rcc_periph_clock_enable(RCC_GPIOC);
 244              		.loc 3 74 4 view .LVU55
 245 0032 40F68210 		movw	r0, #2434
 246 0036 FFF7FEFF 		bl	rcc_periph_clock_enable
 247              	.LVL11:
  75:src/embsysS20.h **** 	rcc_periph_clock_enable(RCC_USART2);
 248              		.loc 3 75 2 view .LVU56
 249 003a 40F61130 		movw	r0, #2833
 250 003e FFF7FEFF 		bl	rcc_periph_clock_enable
 251              	.LVL12:
  76:src/embsysS20.h **** }
 252              		.loc 3 76 1 is_stmt 0 view .LVU57
 253 0042 02B0     		add	sp, sp, #8
 254              	.LCFI4:
 255              		.cfi_def_cfa_offset 8
 256              		@ sp needed
 257 0044 10BD     		pop	{r4, pc}
 258              		.cfi_endproc
 259              	.LFE13:
 261              		.section	.text.usart_setup,"ax",%progbits
 262              		.align	1
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 267              	usart_setup:
 268              	.LFB14:
  77:src/embsysS20.h **** 
  78:src/embsysS20.h **** static void usart_setup(void)
  79:src/embsysS20.h **** {
 269              		.loc 3 79 1 is_stmt 1 view -0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273 0000 10B5     		push	{r4, lr}
 274              	.LCFI5:
 275              		.cfi_def_cfa_offset 8
 276              		.cfi_offset 4, -8
 277              		.cfi_offset 14, -4
  80:src/embsysS20.h ****    nvic_enable_irq(NVIC_USART2_IRQ);
 278              		.loc 3 80 4 view .LVU59
 279 0002 2620     		movs	r0, #38
 280 0004 FFF7FEFF 		bl	nvic_enable_irq
 281              	.LVL13:
  81:src/embsysS20.h **** 
  82:src/embsysS20.h ****    /* Setup GPIO pins for USART */
ARM GAS  build/m3.s 			page 9


  83:src/embsysS20.h ****    //Transmit
  84:src/embsysS20.h **** 	gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO2);
 282              		.loc 3 84 2 view .LVU60
 283 0008 0423     		movs	r3, #4
 284 000a 0022     		movs	r2, #0
 285 000c 0221     		movs	r1, #2
 286 000e 4FF09040 		mov	r0, #1207959552
 287 0012 FFF7FEFF 		bl	gpio_mode_setup
 288              	.LVL14:
  85:src/embsysS20.h ****    //Recieve
  86:src/embsysS20.h ****    gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO3);   
 289              		.loc 3 86 4 view .LVU61
 290 0016 0823     		movs	r3, #8
 291 0018 0022     		movs	r2, #0
 292 001a 0221     		movs	r1, #2
 293 001c 4FF09040 		mov	r0, #1207959552
 294 0020 FFF7FEFF 		bl	gpio_mode_setup
 295              	.LVL15:
  87:src/embsysS20.h ****    //gpio_set_output_options(GPIOA, GPIO_OTYPE_OD, GPIO_OSPEED_25MHZ, GPIO3);	
  88:src/embsysS20.h **** 
  89:src/embsysS20.h ****    /* Setup USART pins as alternate function. */
  90:src/embsysS20.h **** 	gpio_set_af(GPIOA, GPIO_AF7, GPIO2);
 296              		.loc 3 90 2 view .LVU62
 297 0024 0422     		movs	r2, #4
 298 0026 0721     		movs	r1, #7
 299 0028 4FF09040 		mov	r0, #1207959552
 300 002c FFF7FEFF 		bl	gpio_set_af
 301              	.LVL16:
  91:src/embsysS20.h ****    gpio_set_af(GPIOA, GPIO_AF7, GPIO3);
 302              		.loc 3 91 4 view .LVU63
 303 0030 0822     		movs	r2, #8
 304 0032 0721     		movs	r1, #7
 305 0034 4FF09040 		mov	r0, #1207959552
 306 0038 FFF7FEFF 		bl	gpio_set_af
 307              	.LVL17:
  92:src/embsysS20.h ****     
  93:src/embsysS20.h **** 
  94:src/embsysS20.h **** 	/* Setup UART parameters. */
  95:src/embsysS20.h **** 	usart_set_baudrate(USART2, 57600);
 308              		.loc 3 95 2 view .LVU64
 309 003c 104C     		ldr	r4, .L23
 310 003e 4FF46141 		mov	r1, #57600
 311 0042 2046     		mov	r0, r4
 312 0044 FFF7FEFF 		bl	usart_set_baudrate
 313              	.LVL18:
  96:src/embsysS20.h **** 	usart_set_databits(USART2, 9);  // check the effect of parity on this fcn.
 314              		.loc 3 96 2 view .LVU65
 315 0048 0921     		movs	r1, #9
 316 004a 2046     		mov	r0, r4
 317 004c FFF7FEFF 		bl	usart_set_databits
 318              	.LVL19:
  97:src/embsysS20.h **** 	usart_set_stopbits(USART2,USART_STOPBITS_1);
 319              		.loc 3 97 2 view .LVU66
 320 0050 0021     		movs	r1, #0
 321 0052 2046     		mov	r0, r4
 322 0054 FFF7FEFF 		bl	usart_set_stopbits
 323              	.LVL20:
ARM GAS  build/m3.s 			page 10


  98:src/embsysS20.h **** 	usart_set_mode(USART2, USART_MODE_TX_RX);
 324              		.loc 3 98 2 view .LVU67
 325 0058 0C21     		movs	r1, #12
 326 005a 2046     		mov	r0, r4
 327 005c FFF7FEFF 		bl	usart_set_mode
 328              	.LVL21:
  99:src/embsysS20.h **** 	usart_set_parity(USART2, USART_PARITY_NONE); //Changed from ODD to NONE for testing
 329              		.loc 3 99 2 view .LVU68
 330 0060 0021     		movs	r1, #0
 331 0062 2046     		mov	r0, r4
 332 0064 FFF7FEFF 		bl	usart_set_parity
 333              	.LVL22:
 100:src/embsysS20.h **** 	usart_set_flow_control(USART2, USART_FLOWCONTROL_NONE);
 334              		.loc 3 100 2 view .LVU69
 335 0068 0021     		movs	r1, #0
 336 006a 2046     		mov	r0, r4
 337 006c FFF7FEFF 		bl	usart_set_flow_control
 338              	.LVL23:
 101:src/embsysS20.h **** 
 102:src/embsysS20.h ****    usart_enable_rx_interrupt(USART2);
 339              		.loc 3 102 4 view .LVU70
 340 0070 2046     		mov	r0, r4
 341 0072 FFF7FEFF 		bl	usart_enable_rx_interrupt
 342              	.LVL24:
 103:src/embsysS20.h **** 
 104:src/embsysS20.h ****    usart_enable(USART2);
 343              		.loc 3 104 4 view .LVU71
 344 0076 2046     		mov	r0, r4
 345 0078 FFF7FEFF 		bl	usart_enable
 346              	.LVL25:
 105:src/embsysS20.h **** 
 106:src/embsysS20.h **** }
 347              		.loc 3 106 1 is_stmt 0 view .LVU72
 348 007c 10BD     		pop	{r4, pc}
 349              	.L24:
 350 007e 00BF     		.align	2
 351              	.L23:
 352 0080 00440040 		.word	1073759232
 353              		.cfi_endproc
 354              	.LFE14:
 356              		.section	.text.timer_setup,"ax",%progbits
 357              		.align	1
 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 362              	timer_setup:
 363              	.LFB16:
 107:src/embsysS20.h **** 
 108:src/embsysS20.h **** void usart_isr(void)
 109:src/embsysS20.h **** {
 110:src/embsysS20.h ****   if(((USART_CR1(USART2) & USART_CR1_RXNEIE) != 0) && (usart_get_flag(USART2, USART_ISR_RXNE)))
 111:src/embsysS20.h ****   {
 112:src/embsysS20.h ****       circbuffer_queue(&circBufferIn, usart_recv(USART2));
 113:src/embsysS20.h ****   }
 114:src/embsysS20.h **** 
 115:src/embsysS20.h ****   if(((USART_CR1(USART2) & USART_CR1_TXEIE) != 0) && (usart_get_flag(USART2, USART_ISR_TXE)))
 116:src/embsysS20.h ****   {
ARM GAS  build/m3.s 			page 11


 117:src/embsysS20.h ****    char charSending = '\0';
 118:src/embsysS20.h ****    circbuffer_dequeue(&circBufferOut, &charSending);
 119:src/embsysS20.h ****    usart_send(USART2, charSending);
 120:src/embsysS20.h **** 
 121:src/embsysS20.h ****    if(bufferIsEmpty(&circBufferOut))
 122:src/embsysS20.h ****    {
 123:src/embsysS20.h ****       usart_disable_tx_interrupt(USART2);
 124:src/embsysS20.h ****    }
 125:src/embsysS20.h ****   }
 126:src/embsysS20.h **** 
 127:src/embsysS20.h **** }
 128:src/embsysS20.h **** 
 129:src/embsysS20.h **** static void timer_setup(void)
 130:src/embsysS20.h **** {
 364              		.loc 3 130 1 is_stmt 1 view -0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 368 0000 08B5     		push	{r3, lr}
 369              	.LCFI6:
 370              		.cfi_def_cfa_offset 8
 371              		.cfi_offset 3, -8
 372              		.cfi_offset 14, -4
 131:src/embsysS20.h ****    rcc_periph_clock_enable(RCC_TIM2);
 373              		.loc 3 131 4 view .LVU74
 374 0002 4FF43060 		mov	r0, #2816
 375 0006 FFF7FEFF 		bl	rcc_periph_clock_enable
 376              	.LVL26:
 132:src/embsysS20.h ****    rcc_periph_reset_pulse(RST_TIM2);
 377              		.loc 3 132 4 view .LVU75
 378 000a 4FF4E060 		mov	r0, #1792
 379 000e FFF7FEFF 		bl	rcc_periph_reset_pulse
 380              	.LVL27:
 133:src/embsysS20.h **** 
 134:src/embsysS20.h ****    /* Setup timer parameters. */
 135:src/embsysS20.h ****    // timer_set_mode(TIM2, TIM_CR1_CKD_CK_INT, TIM_CR1_CMS_EDGE, TIM_CR1_DIR_UP);
 136:src/embsysS20.h **** 
 137:src/embsysS20.h ****    timer_set_prescaler(TIM2, 2000);
 381              		.loc 3 137 4 view .LVU76
 382 0012 4FF4FA61 		mov	r1, #2000
 383 0016 4FF08040 		mov	r0, #1073741824
 384 001a FFF7FEFF 		bl	timer_set_prescaler
 385              	.LVL28:
 138:src/embsysS20.h ****    
 139:src/embsysS20.h ****    timer_set_period(TIM2, 1000);
 386              		.loc 3 139 4 view .LVU77
 387 001e 4FF47A71 		mov	r1, #1000
 388 0022 4FF08040 		mov	r0, #1073741824
 389 0026 FFF7FEFF 		bl	timer_set_period
 390              	.LVL29:
 140:src/embsysS20.h ****    timer_enable_counter(TIM2);
 391              		.loc 3 140 4 view .LVU78
 392 002a 4FF08040 		mov	r0, #1073741824
 393 002e FFF7FEFF 		bl	timer_enable_counter
 394              	.LVL30:
 141:src/embsysS20.h **** 
 142:src/embsysS20.h ****    timer_enable_irq(TIM2,TIM_DIER_CC1IE);
ARM GAS  build/m3.s 			page 12


 395              		.loc 3 142 4 view .LVU79
 396 0032 0221     		movs	r1, #2
 397 0034 4FF08040 		mov	r0, #1073741824
 398 0038 FFF7FEFF 		bl	timer_enable_irq
 399              	.LVL31:
 143:src/embsysS20.h **** }
 400              		.loc 3 143 1 is_stmt 0 view .LVU80
 401 003c 08BD     		pop	{r3, pc}
 402              		.cfi_endproc
 403              	.LFE16:
 405              		.section	.text.circbuffer_reset,"ax",%progbits
 406              		.align	1
 407              		.global	circbuffer_reset
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 412              	circbuffer_reset:
 413              	.LVL32:
 414              	.LFB3:
  15:src/circbuffer.h ****     assert(myBuff);
 415              		.loc 2 15 42 is_stmt 1 view -0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
  15:src/circbuffer.h ****     assert(myBuff);
 419              		.loc 2 15 42 is_stmt 0 view .LVU82
 420 0000 08B5     		push	{r3, lr}
 421              	.LCFI7:
 422              		.cfi_def_cfa_offset 8
 423              		.cfi_offset 3, -8
 424              		.cfi_offset 14, -4
  16:src/circbuffer.h **** 
 425              		.loc 2 16 4 is_stmt 1 view .LVU83
  16:src/circbuffer.h **** 
 426              		.loc 2 16 16 is_stmt 0 view .LVU84
 427 0002 20B1     		cbz	r0, .L30
  18:src/circbuffer.h ****     myBuff->tailIndex = 0;
 428              		.loc 2 18 5 is_stmt 1 view .LVU85
  18:src/circbuffer.h ****     myBuff->tailIndex = 0;
 429              		.loc 2 18 23 is_stmt 0 view .LVU86
 430 0004 0022     		movs	r2, #0
 431 0006 0271     		strb	r2, [r0, #4]
  19:src/circbuffer.h ****     myBuff->isFull = false;
 432              		.loc 2 19 5 is_stmt 1 view .LVU87
  19:src/circbuffer.h ****     myBuff->isFull = false;
 433              		.loc 2 19 23 is_stmt 0 view .LVU88
 434 0008 4271     		strb	r2, [r0, #5]
  20:src/circbuffer.h **** }
 435              		.loc 2 20 5 is_stmt 1 view .LVU89
  20:src/circbuffer.h **** }
 436              		.loc 2 20 20 is_stmt 0 view .LVU90
 437 000a 8271     		strb	r2, [r0, #6]
  21:src/circbuffer.h **** 
 438              		.loc 2 21 1 view .LVU91
 439 000c 08BD     		pop	{r3, pc}
 440              	.L30:
  16:src/circbuffer.h **** 
ARM GAS  build/m3.s 			page 13


 441              		.loc 2 16 18 discriminator 1 view .LVU92
 442 000e 034B     		ldr	r3, .L31
 443 0010 034A     		ldr	r2, .L31+4
 444 0012 1021     		movs	r1, #16
 445 0014 0348     		ldr	r0, .L31+8
 446              	.LVL33:
  16:src/circbuffer.h **** 
 447              		.loc 2 16 18 discriminator 1 view .LVU93
 448 0016 FFF7FEFF 		bl	__assert_func
 449              	.LVL34:
 450              	.L32:
 451 001a 00BF     		.align	2
 452              	.L31:
 453 001c 00000000 		.word	.LC0
 454 0020 00000000 		.word	__func__.14
 455 0024 08000000 		.word	.LC1
 456              		.cfi_endproc
 457              	.LFE3:
 459              		.section	.text.bufferIsEmpty,"ax",%progbits
 460              		.align	1
 461              		.global	bufferIsEmpty
 462              		.syntax unified
 463              		.thumb
 464              		.thumb_func
 466              	bufferIsEmpty:
 467              	.LVL35:
 468              	.LFB4:
  23:src/circbuffer.h ****     assert(myBuff);
 469              		.loc 2 23 39 is_stmt 1 view -0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
  23:src/circbuffer.h ****     assert(myBuff);
 473              		.loc 2 23 39 is_stmt 0 view .LVU95
 474 0000 08B5     		push	{r3, lr}
 475              	.LCFI8:
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 3, -8
 478              		.cfi_offset 14, -4
  24:src/circbuffer.h **** 
 479              		.loc 2 24 4 is_stmt 1 view .LVU96
  24:src/circbuffer.h **** 
 480              		.loc 2 24 16 is_stmt 0 view .LVU97
 481 0002 38B1     		cbz	r0, .L39
  26:src/circbuffer.h **** }
 482              		.loc 2 26 5 is_stmt 1 view .LVU98
  26:src/circbuffer.h **** }
 483              		.loc 2 26 19 is_stmt 0 view .LVU99
 484 0004 8279     		ldrb	r2, [r0, #6]	@ zero_extendqisi2
  26:src/circbuffer.h **** }
 485              		.loc 2 26 28 view .LVU100
 486 0006 5AB9     		cbnz	r2, .L36
  26:src/circbuffer.h **** }
 487              		.loc 2 26 38 discriminator 1 view .LVU101
 488 0008 0279     		ldrb	r2, [r0, #4]	@ zero_extendqisi2
  26:src/circbuffer.h **** }
 489              		.loc 2 26 59 discriminator 1 view .LVU102
ARM GAS  build/m3.s 			page 14


 490 000a 4379     		ldrb	r3, [r0, #5]	@ zero_extendqisi2
  26:src/circbuffer.h **** }
 491              		.loc 2 26 28 discriminator 1 view .LVU103
 492 000c 9A42     		cmp	r2, r3
 493 000e 09D0     		beq	.L37
  26:src/circbuffer.h **** }
 494              		.loc 2 26 28 view .LVU104
 495 0010 0020     		movs	r0, #0
 496              	.LVL36:
  26:src/circbuffer.h **** }
 497              		.loc 2 26 28 view .LVU105
 498 0012 06E0     		b	.L35
 499              	.LVL37:
 500              	.L39:
  24:src/circbuffer.h **** 
 501              		.loc 2 24 18 discriminator 1 view .LVU106
 502 0014 044B     		ldr	r3, .L40
 503 0016 054A     		ldr	r2, .L40+4
 504 0018 1821     		movs	r1, #24
 505 001a 0548     		ldr	r0, .L40+8
 506              	.LVL38:
  24:src/circbuffer.h **** 
 507              		.loc 2 24 18 discriminator 1 view .LVU107
 508 001c FFF7FEFF 		bl	__assert_func
 509              	.LVL39:
 510              	.L36:
  26:src/circbuffer.h **** }
 511              		.loc 2 26 28 view .LVU108
 512 0020 0020     		movs	r0, #0
 513              	.LVL40:
 514              	.L35:
  27:src/circbuffer.h **** 
 515              		.loc 2 27 1 discriminator 6 view .LVU109
 516 0022 08BD     		pop	{r3, pc}
 517              	.LVL41:
 518              	.L37:
  26:src/circbuffer.h **** }
 519              		.loc 2 26 28 view .LVU110
 520 0024 0120     		movs	r0, #1
 521              	.LVL42:
  26:src/circbuffer.h **** }
 522              		.loc 2 26 28 view .LVU111
 523 0026 FCE7     		b	.L35
 524              	.L41:
 525              		.align	2
 526              	.L40:
 527 0028 00000000 		.word	.LC0
 528 002c 00000000 		.word	__func__.13
 529 0030 08000000 		.word	.LC1
 530              		.cfi_endproc
 531              	.LFE4:
 533              		.section	.rodata.circbuffer_init.str1.4,"aMS",%progbits,1
 534              		.align	2
 535              	.LC2:
 536 0000 6D794275 		.ascii	"myBuff && buff && size\000"
 536      66662026 
 536      26206275 
ARM GAS  build/m3.s 			page 15


 536      66662026 
 536      26207369 
 537 0017 00       		.align	2
 538              	.LC3:
 539 0018 62756666 		.ascii	"bufferIsEmpty(myBuff)\000"
 539      65724973 
 539      456D7074 
 539      79286D79 
 539      42756666 
 540              		.section	.text.circbuffer_init,"ax",%progbits
 541              		.align	1
 542              		.global	circbuffer_init
 543              		.syntax unified
 544              		.thumb
 545              		.thumb_func
 547              	circbuffer_init:
 548              	.LVL43:
 549              	.LFB5:
  29:src/circbuffer.h ****     assert(myBuff && buff && size);
 550              		.loc 2 29 63 is_stmt 1 view -0
 551              		.cfi_startproc
 552              		@ args = 0, pretend = 0, frame = 0
 553              		@ frame_needed = 0, uses_anonymous_args = 0
  29:src/circbuffer.h ****     assert(myBuff && buff && size);
 554              		.loc 2 29 63 is_stmt 0 view .LVU113
 555 0000 10B5     		push	{r4, lr}
 556              	.LCFI9:
 557              		.cfi_def_cfa_offset 8
 558              		.cfi_offset 4, -8
 559              		.cfi_offset 14, -4
  30:src/circbuffer.h ****     
 560              		.loc 2 30 4 is_stmt 1 view .LVU114
  30:src/circbuffer.h ****     
 561              		.loc 2 30 16 is_stmt 0 view .LVU115
 562 0002 58B1     		cbz	r0, .L43
 563 0004 0446     		mov	r4, r0
  30:src/circbuffer.h ****     
 564              		.loc 2 30 11 discriminator 2 view .LVU116
 565 0006 49B1     		cbz	r1, .L43
  30:src/circbuffer.h ****     
 566              		.loc 2 30 19 discriminator 4 view .LVU117
 567 0008 42B1     		cbz	r2, .L43
  32:src/circbuffer.h ****     myBuff->max = size;
 568              		.loc 2 32 5 is_stmt 1 view .LVU118
  32:src/circbuffer.h ****     myBuff->max = size;
 569              		.loc 2 32 20 is_stmt 0 view .LVU119
 570 000a 0160     		str	r1, [r0]
  33:src/circbuffer.h ****     circbuffer_reset(myBuff);
 571              		.loc 2 33 5 is_stmt 1 view .LVU120
  33:src/circbuffer.h ****     circbuffer_reset(myBuff);
 572              		.loc 2 33 17 is_stmt 0 view .LVU121
 573 000c C271     		strb	r2, [r0, #7]
  34:src/circbuffer.h **** 
 574              		.loc 2 34 5 is_stmt 1 view .LVU122
 575 000e FFF7FEFF 		bl	circbuffer_reset
 576              	.LVL44:
  36:src/circbuffer.h **** }
ARM GAS  build/m3.s 			page 16


 577              		.loc 2 36 4 view .LVU123
  36:src/circbuffer.h **** }
 578              		.loc 2 36 4 is_stmt 0 view .LVU124
 579 0012 2046     		mov	r0, r4
 580 0014 FFF7FEFF 		bl	bufferIsEmpty
 581              	.LVL45:
  36:src/circbuffer.h **** }
 582              		.loc 2 36 16 view .LVU125
 583 0018 30B1     		cbz	r0, .L47
  37:src/circbuffer.h **** 
 584              		.loc 2 37 1 view .LVU126
 585 001a 10BD     		pop	{r4, pc}
 586              	.LVL46:
 587              	.L43:
  30:src/circbuffer.h ****     
 588              		.loc 2 30 18 discriminator 5 view .LVU127
 589 001c 054B     		ldr	r3, .L48
 590 001e 064A     		ldr	r2, .L48+4
 591              	.LVL47:
  30:src/circbuffer.h ****     
 592              		.loc 2 30 18 discriminator 5 view .LVU128
 593 0020 1E21     		movs	r1, #30
 594              	.LVL48:
  30:src/circbuffer.h ****     
 595              		.loc 2 30 18 discriminator 5 view .LVU129
 596 0022 0648     		ldr	r0, .L48+8
 597              	.LVL49:
  30:src/circbuffer.h ****     
 598              		.loc 2 30 18 discriminator 5 view .LVU130
 599 0024 FFF7FEFF 		bl	__assert_func
 600              	.LVL50:
 601              	.L47:
  36:src/circbuffer.h **** }
 602              		.loc 2 36 18 discriminator 1 view .LVU131
 603 0028 054B     		ldr	r3, .L48+12
 604 002a 034A     		ldr	r2, .L48+4
 605 002c 2421     		movs	r1, #36
 606 002e 0348     		ldr	r0, .L48+8
 607 0030 FFF7FEFF 		bl	__assert_func
 608              	.LVL51:
 609              	.L49:
 610              		.align	2
 611              	.L48:
 612 0034 00000000 		.word	.LC2
 613 0038 00000000 		.word	__func__.12
 614 003c 08000000 		.word	.LC1
 615 0040 18000000 		.word	.LC3
 616              		.cfi_endproc
 617              	.LFE5:
 619              		.section	.text.bufferIsFull,"ax",%progbits
 620              		.align	1
 621              		.global	bufferIsFull
 622              		.syntax unified
 623              		.thumb
 624              		.thumb_func
 626              	bufferIsFull:
 627              	.LVL52:
ARM GAS  build/m3.s 			page 17


 628              	.LFB6:
  39:src/circbuffer.h ****     assert(myBuff);
 629              		.loc 2 39 37 is_stmt 1 view -0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 0, uses_anonymous_args = 0
  39:src/circbuffer.h ****     assert(myBuff);
 633              		.loc 2 39 37 is_stmt 0 view .LVU133
 634 0000 08B5     		push	{r3, lr}
 635              	.LCFI10:
 636              		.cfi_def_cfa_offset 8
 637              		.cfi_offset 3, -8
 638              		.cfi_offset 14, -4
  40:src/circbuffer.h ****     return myBuff->isFull;
 639              		.loc 2 40 4 is_stmt 1 view .LVU134
  40:src/circbuffer.h ****     return myBuff->isFull;
 640              		.loc 2 40 16 is_stmt 0 view .LVU135
 641 0002 08B1     		cbz	r0, .L53
  41:src/circbuffer.h **** }
 642              		.loc 2 41 5 is_stmt 1 view .LVU136
  42:src/circbuffer.h **** 
 643              		.loc 2 42 1 is_stmt 0 view .LVU137
 644 0004 8079     		ldrb	r0, [r0, #6]	@ zero_extendqisi2
 645              	.LVL53:
  42:src/circbuffer.h **** 
 646              		.loc 2 42 1 view .LVU138
 647 0006 08BD     		pop	{r3, pc}
 648              	.LVL54:
 649              	.L53:
  40:src/circbuffer.h ****     return myBuff->isFull;
 650              		.loc 2 40 18 discriminator 1 view .LVU139
 651 0008 024B     		ldr	r3, .L54
 652 000a 034A     		ldr	r2, .L54+4
 653 000c 2821     		movs	r1, #40
 654 000e 0348     		ldr	r0, .L54+8
 655              	.LVL55:
  40:src/circbuffer.h ****     return myBuff->isFull;
 656              		.loc 2 40 18 discriminator 1 view .LVU140
 657 0010 FFF7FEFF 		bl	__assert_func
 658              	.LVL56:
 659              	.L55:
 660              		.align	2
 661              	.L54:
 662 0014 00000000 		.word	.LC0
 663 0018 00000000 		.word	__func__.11
 664 001c 08000000 		.word	.LC1
 665              		.cfi_endproc
 666              	.LFE6:
 668              		.section	.text.circbuff_entries,"ax",%progbits
 669              		.align	1
 670              		.global	circbuff_entries
 671              		.syntax unified
 672              		.thumb
 673              		.thumb_func
 675              	circbuff_entries:
 676              	.LVL57:
 677              	.LFB7:
ARM GAS  build/m3.s 			page 18


  44:src/circbuffer.h ****     assert(myBuff);
 678              		.loc 2 44 45 is_stmt 1 view -0
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 0
 681              		@ frame_needed = 0, uses_anonymous_args = 0
  44:src/circbuffer.h ****     assert(myBuff);
 682              		.loc 2 44 45 is_stmt 0 view .LVU142
 683 0000 08B5     		push	{r3, lr}
 684              	.LCFI11:
 685              		.cfi_def_cfa_offset 8
 686              		.cfi_offset 3, -8
 687              		.cfi_offset 14, -4
  45:src/circbuffer.h **** 
 688              		.loc 2 45 4 is_stmt 1 view .LVU143
  45:src/circbuffer.h **** 
 689              		.loc 2 45 16 is_stmt 0 view .LVU144
 690 0002 50B1     		cbz	r0, .L61
 691 0004 0346     		mov	r3, r0
  47:src/circbuffer.h **** 
 692              		.loc 2 47 2 is_stmt 1 view .LVU145
  47:src/circbuffer.h **** 
 693              		.loc 2 47 10 is_stmt 0 view .LVU146
 694 0006 C079     		ldrb	r0, [r0, #7]	@ zero_extendqisi2
 695              	.LVL58:
  49:src/circbuffer.h **** 	
 696              		.loc 2 49 2 is_stmt 1 view .LVU147
  49:src/circbuffer.h **** 	
 697              		.loc 2 49 12 is_stmt 0 view .LVU148
 698 0008 9A79     		ldrb	r2, [r3, #6]	@ zero_extendqisi2
  49:src/circbuffer.h **** 	
 699              		.loc 2 49 4 view .LVU149
 700 000a 2AB9     		cbnz	r2, .L58
  51:src/circbuffer.h **** 			size = myBuff->headIndex - myBuff->tailIndex;
 701              		.loc 2 51 6 is_stmt 1 view .LVU150
  51:src/circbuffer.h **** 			size = myBuff->headIndex - myBuff->tailIndex;
 702              		.loc 2 51 15 is_stmt 0 view .LVU151
 703 000c 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
  51:src/circbuffer.h **** 			size = myBuff->headIndex - myBuff->tailIndex;
 704              		.loc 2 51 36 view .LVU152
 705 000e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 706              	.LVL59:
  51:src/circbuffer.h **** 			size = myBuff->headIndex - myBuff->tailIndex;
 707              		.loc 2 51 8 view .LVU153
 708 0010 9A42     		cmp	r2, r3
 709 0012 08D3     		bcc	.L59
  52:src/circbuffer.h **** 		else
 710              		.loc 2 52 4 is_stmt 1 view .LVU154
  52:src/circbuffer.h **** 		else
 711              		.loc 2 52 9 is_stmt 0 view .LVU155
 712 0014 D21A     		subs	r2, r2, r3
 713 0016 D0B2     		uxtb	r0, r2
 714              	.LVL60:
 715              	.L58:
  57:src/circbuffer.h **** }
 716              		.loc 2 57 5 is_stmt 1 view .LVU156
  58:src/circbuffer.h **** 
 717              		.loc 2 58 1 is_stmt 0 view .LVU157
ARM GAS  build/m3.s 			page 19


 718 0018 08BD     		pop	{r3, pc}
 719              	.LVL61:
 720              	.L61:
  45:src/circbuffer.h **** 
 721              		.loc 2 45 18 discriminator 1 view .LVU158
 722 001a 054B     		ldr	r3, .L62
 723 001c 054A     		ldr	r2, .L62+4
 724 001e 2D21     		movs	r1, #45
 725 0020 0548     		ldr	r0, .L62+8
 726              	.LVL62:
  45:src/circbuffer.h **** 
 727              		.loc 2 45 18 discriminator 1 view .LVU159
 728 0022 FFF7FEFF 		bl	__assert_func
 729              	.LVL63:
 730              	.L59:
  54:src/circbuffer.h **** 	}
 731              		.loc 2 54 4 is_stmt 1 view .LVU160
  54:src/circbuffer.h **** 	}
 732              		.loc 2 54 23 is_stmt 0 view .LVU161
 733 0026 1044     		add	r0, r0, r2
 734              	.LVL64:
  54:src/circbuffer.h **** 	}
 735              		.loc 2 54 23 view .LVU162
 736 0028 C0B2     		uxtb	r0, r0
  54:src/circbuffer.h **** 	}
 737              		.loc 2 54 9 view .LVU163
 738 002a C01A     		subs	r0, r0, r3
 739 002c C0B2     		uxtb	r0, r0
 740              	.LVL65:
  54:src/circbuffer.h **** 	}
 741              		.loc 2 54 9 view .LVU164
 742 002e F3E7     		b	.L58
 743              	.L63:
 744              		.align	2
 745              	.L62:
 746 0030 00000000 		.word	.LC0
 747 0034 00000000 		.word	__func__.10
 748 0038 08000000 		.word	.LC1
 749              		.cfi_endproc
 750              	.LFE7:
 752              		.section	.rodata.circbuffer_queue.str1.4,"aMS",%progbits,1
 753              		.align	2
 754              	.LC4:
 755 0000 6D794275 		.ascii	"myBuff && myBuff->buffer\000"
 755      66662026 
 755      26206D79 
 755      42756666 
 755      2D3E6275 
 756              		.section	.text.circbuffer_queue,"ax",%progbits
 757              		.align	1
 758              		.global	circbuffer_queue
 759              		.syntax unified
 760              		.thumb
 761              		.thumb_func
 763              	circbuffer_queue:
 764              	.LVL66:
 765              	.LFB10:
ARM GAS  build/m3.s 			page 20


  86:src/circbuffer.h **** 
  87:src/circbuffer.h **** void circbuffer_queue(circbuffer* myBuff, char data){
 766              		.loc 2 87 53 is_stmt 1 view -0
 767              		.cfi_startproc
 768              		@ args = 0, pretend = 0, frame = 0
 769              		@ frame_needed = 0, uses_anonymous_args = 0
 770              		.loc 2 87 53 is_stmt 0 view .LVU166
 771 0000 08B5     		push	{r3, lr}
 772              	.LCFI12:
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 3, -8
 775              		.cfi_offset 14, -4
  88:src/circbuffer.h ****     assert(myBuff && myBuff->buffer);
 776              		.loc 2 88 4 is_stmt 1 view .LVU167
 777              		.loc 2 88 16 is_stmt 0 view .LVU168
 778 0002 40B1     		cbz	r0, .L65
 779 0004 0346     		mov	r3, r0
 780              		.loc 2 88 20 discriminator 2 view .LVU169
 781 0006 0268     		ldr	r2, [r0]
 782              		.loc 2 88 11 discriminator 2 view .LVU170
 783 0008 2AB1     		cbz	r2, .L65
  89:src/circbuffer.h **** 
  90:src/circbuffer.h ****     myBuff->buffer[myBuff->headIndex] = data;
 784              		.loc 2 90 5 is_stmt 1 view .LVU171
 785              		.loc 2 90 26 is_stmt 0 view .LVU172
 786 000a 0079     		ldrb	r0, [r0, #4]	@ zero_extendqisi2
 787              	.LVL67:
 788              		.loc 2 90 39 view .LVU173
 789 000c 1154     		strb	r1, [r2, r0]
  91:src/circbuffer.h **** 
  92:src/circbuffer.h ****     advancePointer(myBuff);
 790              		.loc 2 92 5 is_stmt 1 view .LVU174
 791 000e 1846     		mov	r0, r3
 792 0010 FFF7FEFF 		bl	advancePointer
 793              	.LVL68:
  93:src/circbuffer.h **** }
 794              		.loc 2 93 1 is_stmt 0 view .LVU175
 795 0014 08BD     		pop	{r3, pc}
 796              	.LVL69:
 797              	.L65:
  88:src/circbuffer.h **** 
 798              		.loc 2 88 18 discriminator 3 view .LVU176
 799 0016 034B     		ldr	r3, .L68
 800 0018 034A     		ldr	r2, .L68+4
 801 001a 5821     		movs	r1, #88
 802              	.LVL70:
  88:src/circbuffer.h **** 
 803              		.loc 2 88 18 discriminator 3 view .LVU177
 804 001c 0348     		ldr	r0, .L68+8
 805              	.LVL71:
  88:src/circbuffer.h **** 
 806              		.loc 2 88 18 discriminator 3 view .LVU178
 807 001e FFF7FEFF 		bl	__assert_func
 808              	.LVL72:
 809              	.L69:
 810 0022 00BF     		.align	2
 811              	.L68:
ARM GAS  build/m3.s 			page 21


 812 0024 00000000 		.word	.LC4
 813 0028 00000000 		.word	__func__.9
 814 002c 08000000 		.word	.LC1
 815              		.cfi_endproc
 816              	.LFE10:
 818              		.section	.rodata.circbuffer_dequeue.str1.4,"aMS",%progbits,1
 819              		.align	2
 820              	.LC5:
 821 0000 64617461 		.ascii	"data\000"
 821      00
 822 0005 000000   		.align	2
 823              	.LC6:
 824 0008 6D794275 		.ascii	"myBuff->buffer\000"
 824      66662D3E 
 824      62756666 
 824      657200
 825              		.section	.text.circbuffer_dequeue,"ax",%progbits
 826              		.align	1
 827              		.global	circbuffer_dequeue
 828              		.syntax unified
 829              		.thumb
 830              		.thumb_func
 832              	circbuffer_dequeue:
 833              	.LVL73:
 834              	.LFB11:
  94:src/circbuffer.h **** 
  95:src/circbuffer.h **** bool circbuffer_dequeue(circbuffer* myBuff, char* data){
 835              		.loc 2 95 55 is_stmt 1 view -0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839              		.loc 2 95 55 is_stmt 0 view .LVU180
 840 0000 70B5     		push	{r4, r5, r6, lr}
 841              	.LCFI13:
 842              		.cfi_def_cfa_offset 16
 843              		.cfi_offset 4, -16
 844              		.cfi_offset 5, -12
 845              		.cfi_offset 6, -8
 846              		.cfi_offset 14, -4
  96:src/circbuffer.h ****     assert(myBuff);
 847              		.loc 2 96 4 is_stmt 1 view .LVU181
 848              		.loc 2 96 16 is_stmt 0 view .LVU182
 849 0002 48B1     		cbz	r0, .L77
 850 0004 0C46     		mov	r4, r1
 851 0006 0546     		mov	r5, r0
  97:src/circbuffer.h ****     assert(data);
 852              		.loc 2 97 4 is_stmt 1 view .LVU183
 853              		.loc 2 97 16 is_stmt 0 view .LVU184
 854 0008 61B1     		cbz	r1, .L78
  98:src/circbuffer.h ****     assert(myBuff->buffer);
 855              		.loc 2 98 4 is_stmt 1 view .LVU185
 856              		.loc 2 98 10 is_stmt 0 view .LVU186
 857 000a 0668     		ldr	r6, [r0]
 858              		.loc 2 98 16 view .LVU187
 859 000c 86B1     		cbz	r6, .L79
  99:src/circbuffer.h **** 
 100:src/circbuffer.h ****     bool x = false;
ARM GAS  build/m3.s 			page 22


 860              		.loc 2 100 4 is_stmt 1 view .LVU188
 861              	.LVL74:
 101:src/circbuffer.h **** 
 102:src/circbuffer.h ****     if(!bufferIsEmpty(myBuff)){
 862              		.loc 2 102 5 view .LVU189
 863              		.loc 2 102 9 is_stmt 0 view .LVU190
 864 000e FFF7FEFF 		bl	bufferIsEmpty
 865              	.LVL75:
 866              		.loc 2 102 7 view .LVU191
 867 0012 98B1     		cbz	r0, .L80
 100:src/circbuffer.h **** 
 868              		.loc 2 100 9 view .LVU192
 869 0014 0020     		movs	r0, #0
 870              	.LVL76:
 871              	.L74:
 103:src/circbuffer.h ****         *data = myBuff->buffer[myBuff->tailIndex];
 104:src/circbuffer.h ****         backPointer(myBuff);
 105:src/circbuffer.h ****         x = true;
 106:src/circbuffer.h ****     }
 107:src/circbuffer.h **** 
 108:src/circbuffer.h ****     return x;
 872              		.loc 2 108 5 is_stmt 1 view .LVU193
 109:src/circbuffer.h **** }
 873              		.loc 2 109 1 is_stmt 0 view .LVU194
 874 0016 70BD     		pop	{r4, r5, r6, pc}
 875              	.LVL77:
 876              	.L77:
  96:src/circbuffer.h ****     assert(data);
 877              		.loc 2 96 18 discriminator 1 view .LVU195
 878 0018 0C4B     		ldr	r3, .L81
 879 001a 0D4A     		ldr	r2, .L81+4
 880 001c 6021     		movs	r1, #96
 881              	.LVL78:
  96:src/circbuffer.h ****     assert(data);
 882              		.loc 2 96 18 discriminator 1 view .LVU196
 883 001e 0D48     		ldr	r0, .L81+8
 884              	.LVL79:
  96:src/circbuffer.h ****     assert(data);
 885              		.loc 2 96 18 discriminator 1 view .LVU197
 886 0020 FFF7FEFF 		bl	__assert_func
 887              	.LVL80:
 888              	.L78:
  97:src/circbuffer.h ****     assert(myBuff->buffer);
 889              		.loc 2 97 18 discriminator 1 view .LVU198
 890 0024 0C4B     		ldr	r3, .L81+12
 891 0026 0A4A     		ldr	r2, .L81+4
 892 0028 6121     		movs	r1, #97
 893              	.LVL81:
  97:src/circbuffer.h ****     assert(myBuff->buffer);
 894              		.loc 2 97 18 discriminator 1 view .LVU199
 895 002a 0A48     		ldr	r0, .L81+8
 896              	.LVL82:
  97:src/circbuffer.h ****     assert(myBuff->buffer);
 897              		.loc 2 97 18 discriminator 1 view .LVU200
 898 002c FFF7FEFF 		bl	__assert_func
 899              	.LVL83:
 900              	.L79:
ARM GAS  build/m3.s 			page 23


  98:src/circbuffer.h **** 
 901              		.loc 2 98 18 discriminator 1 view .LVU201
 902 0030 0A4B     		ldr	r3, .L81+16
 903 0032 074A     		ldr	r2, .L81+4
 904 0034 6221     		movs	r1, #98
 905              	.LVL84:
  98:src/circbuffer.h **** 
 906              		.loc 2 98 18 discriminator 1 view .LVU202
 907 0036 0748     		ldr	r0, .L81+8
 908              	.LVL85:
  98:src/circbuffer.h **** 
 909              		.loc 2 98 18 discriminator 1 view .LVU203
 910 0038 FFF7FEFF 		bl	__assert_func
 911              	.LVL86:
 912              	.L80:
 103:src/circbuffer.h ****         backPointer(myBuff);
 913              		.loc 2 103 9 is_stmt 1 view .LVU204
 103:src/circbuffer.h ****         backPointer(myBuff);
 914              		.loc 2 103 38 is_stmt 0 view .LVU205
 915 003c 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 103:src/circbuffer.h ****         backPointer(myBuff);
 916              		.loc 2 103 31 view .LVU206
 917 003e F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 103:src/circbuffer.h ****         backPointer(myBuff);
 918              		.loc 2 103 15 view .LVU207
 919 0040 2370     		strb	r3, [r4]
 104:src/circbuffer.h ****         x = true;
 920              		.loc 2 104 9 is_stmt 1 view .LVU208
 921 0042 2846     		mov	r0, r5
 922 0044 FFF7FEFF 		bl	backPointer
 923              	.LVL87:
 105:src/circbuffer.h ****     }
 924              		.loc 2 105 9 view .LVU209
 105:src/circbuffer.h ****     }
 925              		.loc 2 105 11 is_stmt 0 view .LVU210
 926 0048 0120     		movs	r0, #1
 927 004a E4E7     		b	.L74
 928              	.L82:
 929              		.align	2
 930              	.L81:
 931 004c 00000000 		.word	.LC0
 932 0050 00000000 		.word	__func__.7
 933 0054 08000000 		.word	.LC1
 934 0058 00000000 		.word	.LC5
 935 005c 08000000 		.word	.LC6
 936              		.cfi_endproc
 937              	.LFE11:
 939              		.section	.rodata.circbuff_recent.str1.4,"aMS",%progbits,1
 940              		.align	2
 941              	.LC7:
 942 0000 6D794275 		.ascii	"myBuff && data && myBuff->buffer\000"
 942      66662026 
 942      26206461 
 942      74612026 
 942      26206D79 
 943              		.section	.text.circbuff_recent,"ax",%progbits
 944              		.align	1
ARM GAS  build/m3.s 			page 24


 945              		.global	circbuff_recent
 946              		.syntax unified
 947              		.thumb
 948              		.thumb_func
 950              	circbuff_recent:
 951              	.LVL88:
 952              	.LFB12:
 110:src/circbuffer.h **** 
 111:src/circbuffer.h **** bool circbuff_recent(circbuffer* myBuff, char* data){
 953              		.loc 2 111 52 is_stmt 1 view -0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 0
 956              		@ frame_needed = 0, uses_anonymous_args = 0
 957              		.loc 2 111 52 is_stmt 0 view .LVU212
 958 0000 70B5     		push	{r4, r5, r6, lr}
 959              	.LCFI14:
 960              		.cfi_def_cfa_offset 16
 961              		.cfi_offset 4, -16
 962              		.cfi_offset 5, -12
 963              		.cfi_offset 6, -8
 964              		.cfi_offset 14, -4
 112:src/circbuffer.h ****     assert(myBuff && data && myBuff->buffer);
 965              		.loc 2 112 4 is_stmt 1 view .LVU213
 966              		.loc 2 112 16 is_stmt 0 view .LVU214
 967 0002 88B1     		cbz	r0, .L84
 968 0004 0C46     		mov	r4, r1
 969 0006 0646     		mov	r6, r0
 970              		.loc 2 112 11 discriminator 2 view .LVU215
 971 0008 71B1     		cbz	r1, .L84
 972              		.loc 2 112 28 discriminator 4 view .LVU216
 973 000a 0568     		ldr	r5, [r0]
 974              		.loc 2 112 19 discriminator 4 view .LVU217
 975 000c 65B1     		cbz	r5, .L84
 113:src/circbuffer.h **** 
 114:src/circbuffer.h ****     bool x = false;
 976              		.loc 2 114 4 is_stmt 1 view .LVU218
 977              	.LVL89:
 115:src/circbuffer.h **** 
 116:src/circbuffer.h ****     if(!bufferIsEmpty(myBuff)){
 978              		.loc 2 116 5 view .LVU219
 979              		.loc 2 116 9 is_stmt 0 view .LVU220
 980 000e FFF7FEFF 		bl	bufferIsEmpty
 981              	.LVL90:
 982              		.loc 2 116 7 view .LVU221
 983 0012 B0B9     		cbnz	r0, .L88
 117:src/circbuffer.h **** 
 118:src/circbuffer.h ****         if(myBuff->headIndex == 0){
 984              		.loc 2 118 9 is_stmt 1 view .LVU222
 985              		.loc 2 118 18 is_stmt 0 view .LVU223
 986 0014 3379     		ldrb	r3, [r6, #4]	@ zero_extendqisi2
 987              		.loc 2 118 11 view .LVU224
 988 0016 6BB9     		cbnz	r3, .L87
 119:src/circbuffer.h ****             myBuff->headIndex = (myBuff->max) - 1;
 989              		.loc 2 119 13 is_stmt 1 view .LVU225
 990              		.loc 2 119 40 is_stmt 0 view .LVU226
 991 0018 F379     		ldrb	r3, [r6, #7]	@ zero_extendqisi2
 992              		.loc 2 119 47 view .LVU227
ARM GAS  build/m3.s 			page 25


 993 001a 013B     		subs	r3, r3, #1
 994 001c DBB2     		uxtb	r3, r3
 995              		.loc 2 119 31 view .LVU228
 996 001e 3371     		strb	r3, [r6, #4]
 120:src/circbuffer.h ****             *data = myBuff->buffer[myBuff->headIndex];
 997              		.loc 2 120 13 is_stmt 1 view .LVU229
 998              		.loc 2 120 35 is_stmt 0 view .LVU230
 999 0020 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1000              		.loc 2 120 19 view .LVU231
 1001 0022 2370     		strb	r3, [r4]
 121:src/circbuffer.h ****             x = true;	
 1002              		.loc 2 121 13 is_stmt 1 view .LVU232
 1003              	.LVL91:
 1004              		.loc 2 121 15 is_stmt 0 view .LVU233
 1005 0024 0120     		movs	r0, #1
 1006 0026 0DE0     		b	.L86
 1007              	.LVL92:
 1008              	.L84:
 112:src/circbuffer.h **** 
 1009              		.loc 2 112 18 discriminator 5 view .LVU234
 1010 0028 074B     		ldr	r3, .L90
 1011 002a 084A     		ldr	r2, .L90+4
 1012 002c 7021     		movs	r1, #112
 1013              	.LVL93:
 112:src/circbuffer.h **** 
 1014              		.loc 2 112 18 discriminator 5 view .LVU235
 1015 002e 0848     		ldr	r0, .L90+8
 1016              	.LVL94:
 112:src/circbuffer.h **** 
 1017              		.loc 2 112 18 discriminator 5 view .LVU236
 1018 0030 FFF7FEFF 		bl	__assert_func
 1019              	.LVL95:
 1020              	.L87:
 122:src/circbuffer.h ****         }   
 123:src/circbuffer.h ****         else{
 124:src/circbuffer.h ****             *data = myBuff->buffer[--(myBuff->headIndex)];
 1021              		.loc 2 124 13 is_stmt 1 view .LVU237
 1022              		.loc 2 124 36 is_stmt 0 view .LVU238
 1023 0034 013B     		subs	r3, r3, #1
 1024 0036 DBB2     		uxtb	r3, r3
 1025              		.loc 2 124 19 view .LVU239
 1026 0038 3371     		strb	r3, [r6, #4]
 1027              		.loc 2 124 35 view .LVU240
 1028 003a EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1029              		.loc 2 124 19 view .LVU241
 1030 003c 2370     		strb	r3, [r4]
 125:src/circbuffer.h ****             x = true;
 1031              		.loc 2 125 13 is_stmt 1 view .LVU242
 1032              	.LVL96:
 1033              		.loc 2 125 15 is_stmt 0 view .LVU243
 1034 003e 0120     		movs	r0, #1
 1035 0040 00E0     		b	.L86
 1036              	.LVL97:
 1037              	.L88:
 114:src/circbuffer.h **** 
 1038              		.loc 2 114 9 view .LVU244
 1039 0042 0020     		movs	r0, #0
ARM GAS  build/m3.s 			page 26


 1040              	.LVL98:
 1041              	.L86:
 126:src/circbuffer.h ****         }
 127:src/circbuffer.h ****     }
 128:src/circbuffer.h **** 
 129:src/circbuffer.h ****     return x;
 1042              		.loc 2 129 5 is_stmt 1 view .LVU245
 130:src/circbuffer.h **** }
 1043              		.loc 2 130 1 is_stmt 0 view .LVU246
 1044 0044 70BD     		pop	{r4, r5, r6, pc}
 1045              	.LVL99:
 1046              	.L91:
 1047              		.loc 2 130 1 view .LVU247
 1048 0046 00BF     		.align	2
 1049              	.L90:
 1050 0048 00000000 		.word	.LC7
 1051 004c 00000000 		.word	__func__.5
 1052 0050 08000000 		.word	.LC1
 1053              		.cfi_endproc
 1054              	.LFE12:
 1056              		.section	.text.usart_isr,"ax",%progbits
 1057              		.align	1
 1058              		.global	usart_isr
 1059              		.syntax unified
 1060              		.thumb
 1061              		.thumb_func
 1063              	usart_isr:
 1064              	.LFB15:
 109:src/embsysS20.h ****   if(((USART_CR1(USART2) & USART_CR1_RXNEIE) != 0) && (usart_get_flag(USART2, USART_ISR_RXNE)))
 1065              		.loc 3 109 1 is_stmt 1 view -0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 8
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 1069 0000 10B5     		push	{r4, lr}
 1070              	.LCFI15:
 1071              		.cfi_def_cfa_offset 8
 1072              		.cfi_offset 4, -8
 1073              		.cfi_offset 14, -4
 1074 0002 82B0     		sub	sp, sp, #8
 1075              	.LCFI16:
 1076              		.cfi_def_cfa_offset 16
 110:src/embsysS20.h ****   {
 1077              		.loc 3 110 3 view .LVU249
 110:src/embsysS20.h ****   {
 1078              		.loc 3 110 9 is_stmt 0 view .LVU250
 1079 0004 4FF04023 		mov	r3, #1073758208
 1080 0008 D3F80034 		ldr	r3, [r3, #1024]
 110:src/embsysS20.h ****   {
 1081              		.loc 3 110 5 view .LVU251
 1082 000c 13F0200F 		tst	r3, #32
 1083 0010 08D1     		bne	.L97
 1084              	.L93:
 115:src/embsysS20.h ****   {
 1085              		.loc 3 115 3 is_stmt 1 view .LVU252
 115:src/embsysS20.h ****   {
 1086              		.loc 3 115 9 is_stmt 0 view .LVU253
 1087 0012 4FF04023 		mov	r3, #1073758208
ARM GAS  build/m3.s 			page 27


 1088 0016 D3F80034 		ldr	r3, [r3, #1024]
 115:src/embsysS20.h ****   {
 1089              		.loc 3 115 5 view .LVU254
 1090 001a 13F0800F 		tst	r3, #128
 1091 001e 0FD1     		bne	.L98
 1092              	.L92:
 127:src/embsysS20.h **** 
 1093              		.loc 3 127 1 view .LVU255
 1094 0020 02B0     		add	sp, sp, #8
 1095              	.LCFI17:
 1096              		.cfi_remember_state
 1097              		.cfi_def_cfa_offset 8
 1098              		@ sp needed
 1099 0022 10BD     		pop	{r4, pc}
 1100              	.L97:
 1101              	.LCFI18:
 1102              		.cfi_restore_state
 110:src/embsysS20.h ****   {
 1103              		.loc 3 110 102 discriminator 1 view .LVU256
 1104 0024 2021     		movs	r1, #32
 1105 0026 1548     		ldr	r0, .L99
 1106 0028 FFF7FEFF 		bl	usart_get_flag
 1107              	.LVL100:
 110:src/embsysS20.h ****   {
 1108              		.loc 3 110 98 discriminator 1 view .LVU257
 1109 002c 0028     		cmp	r0, #0
 1110 002e F0D0     		beq	.L93
 112:src/embsysS20.h ****   }
 1111              		.loc 3 112 7 is_stmt 1 view .LVU258
 112:src/embsysS20.h ****   }
 1112              		.loc 3 112 39 is_stmt 0 view .LVU259
 1113 0030 1248     		ldr	r0, .L99
 1114 0032 FFF7FEFF 		bl	usart_recv
 1115              	.LVL101:
 112:src/embsysS20.h ****   }
 1116              		.loc 3 112 7 view .LVU260
 1117 0036 C1B2     		uxtb	r1, r0
 1118 0038 1148     		ldr	r0, .L99+4
 1119 003a FFF7FEFF 		bl	circbuffer_queue
 1120              	.LVL102:
 1121 003e E8E7     		b	.L93
 1122              	.L98:
 115:src/embsysS20.h ****   {
 1123              		.loc 3 115 102 discriminator 1 view .LVU261
 1124 0040 8021     		movs	r1, #128
 1125 0042 0E48     		ldr	r0, .L99
 1126 0044 FFF7FEFF 		bl	usart_get_flag
 1127              	.LVL103:
 115:src/embsysS20.h ****   {
 1128              		.loc 3 115 98 discriminator 1 view .LVU262
 1129 0048 0028     		cmp	r0, #0
 1130 004a E9D0     		beq	.L92
 1131              	.LBB2:
 117:src/embsysS20.h ****    circbuffer_dequeue(&circBufferOut, &charSending);
 1132              		.loc 3 117 4 is_stmt 1 view .LVU263
 117:src/embsysS20.h ****    circbuffer_dequeue(&circBufferOut, &charSending);
 1133              		.loc 3 117 9 is_stmt 0 view .LVU264
ARM GAS  build/m3.s 			page 28


 1134 004c 0023     		movs	r3, #0
 1135 004e 8DF80730 		strb	r3, [sp, #7]
 118:src/embsysS20.h ****    usart_send(USART2, charSending);
 1136              		.loc 3 118 4 is_stmt 1 view .LVU265
 1137 0052 0C4C     		ldr	r4, .L99+8
 1138 0054 0DF10701 		add	r1, sp, #7
 1139 0058 2046     		mov	r0, r4
 1140 005a FFF7FEFF 		bl	circbuffer_dequeue
 1141              	.LVL104:
 119:src/embsysS20.h **** 
 1142              		.loc 3 119 4 view .LVU266
 1143 005e 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 1144 0062 0648     		ldr	r0, .L99
 1145 0064 FFF7FEFF 		bl	usart_send
 1146              	.LVL105:
 121:src/embsysS20.h ****    {
 1147              		.loc 3 121 4 view .LVU267
 121:src/embsysS20.h ****    {
 1148              		.loc 3 121 7 is_stmt 0 view .LVU268
 1149 0068 2046     		mov	r0, r4
 1150 006a FFF7FEFF 		bl	bufferIsEmpty
 1151              	.LVL106:
 121:src/embsysS20.h ****    {
 1152              		.loc 3 121 6 view .LVU269
 1153 006e 0028     		cmp	r0, #0
 1154 0070 D6D0     		beq	.L92
 123:src/embsysS20.h ****    }
 1155              		.loc 3 123 7 is_stmt 1 view .LVU270
 1156 0072 0248     		ldr	r0, .L99
 1157 0074 FFF7FEFF 		bl	usart_disable_tx_interrupt
 1158              	.LVL107:
 1159              	.LBE2:
 127:src/embsysS20.h **** 
 1160              		.loc 3 127 1 is_stmt 0 view .LVU271
 1161 0078 D2E7     		b	.L92
 1162              	.L100:
 1163 007a 00BF     		.align	2
 1164              	.L99:
 1165 007c 00440040 		.word	1073759232
 1166 0080 00000000 		.word	circBufferIn
 1167 0084 00000000 		.word	circBufferOut
 1168              		.cfi_endproc
 1169              	.LFE15:
 1171              		.section	.text.timer_isr,"ax",%progbits
 1172              		.align	1
 1173              		.global	timer_isr
 1174              		.syntax unified
 1175              		.thumb
 1176              		.thumb_func
 1178              	timer_isr:
 1179              	.LFB17:
 144:src/embsysS20.h **** 
 145:src/embsysS20.h **** void timer_isr(void)
 146:src/embsysS20.h **** {
 1180              		.loc 3 146 1 is_stmt 1 view -0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 0
ARM GAS  build/m3.s 			page 29


 1183              		@ frame_needed = 0, uses_anonymous_args = 0
 1184 0000 08B5     		push	{r3, lr}
 1185              	.LCFI19:
 1186              		.cfi_def_cfa_offset 8
 1187              		.cfi_offset 3, -8
 1188              		.cfi_offset 14, -4
 147:src/embsysS20.h ****   if(timer_get_flag(TIM2, TIM_SR_CC1IF))
 1189              		.loc 3 147 3 view .LVU273
 1190              		.loc 3 147 6 is_stmt 0 view .LVU274
 1191 0002 0221     		movs	r1, #2
 1192 0004 4FF08040 		mov	r0, #1073741824
 1193 0008 FFF7FEFF 		bl	timer_get_flag
 1194              	.LVL108:
 1195              		.loc 3 147 5 view .LVU275
 1196 000c 00B9     		cbnz	r0, .L104
 1197              	.L101:
 148:src/embsysS20.h ****   {
 149:src/embsysS20.h ****     timer_set_period(TIM2, globalPeriod);
 150:src/embsysS20.h ****     timer_clear_flag(TIM2, TIM_SR_CC1IF);
 151:src/embsysS20.h **** 
 152:src/embsysS20.h ****     TOGGLE_LD2;
 153:src/embsysS20.h ****   }
 154:src/embsysS20.h **** }
 1198              		.loc 3 154 1 view .LVU276
 1199 000e 08BD     		pop	{r3, pc}
 1200              	.L104:
 149:src/embsysS20.h ****     timer_clear_flag(TIM2, TIM_SR_CC1IF);
 1201              		.loc 3 149 5 is_stmt 1 view .LVU277
 1202 0010 084B     		ldr	r3, .L105
 1203 0012 1988     		ldrh	r1, [r3]
 1204 0014 4FF08040 		mov	r0, #1073741824
 1205 0018 FFF7FEFF 		bl	timer_set_period
 1206              	.LVL109:
 150:src/embsysS20.h **** 
 1207              		.loc 3 150 5 view .LVU278
 1208 001c 0221     		movs	r1, #2
 1209 001e 4FF08040 		mov	r0, #1073741824
 1210 0022 FFF7FEFF 		bl	timer_clear_flag
 1211              	.LVL110:
 152:src/embsysS20.h ****   }
 1212              		.loc 3 152 5 view .LVU279
 1213 0026 2021     		movs	r1, #32
 1214 0028 4FF09040 		mov	r0, #1207959552
 1215 002c FFF7FEFF 		bl	gpio_toggle
 1216              	.LVL111:
 1217              		.loc 3 154 1 is_stmt 0 view .LVU280
 1218 0030 EDE7     		b	.L101
 1219              	.L106:
 1220 0032 00BF     		.align	2
 1221              	.L105:
 1222 0034 00000000 		.word	globalPeriod
 1223              		.cfi_endproc
 1224              	.LFE17:
 1226              		.section	.text.convertCaps,"ax",%progbits
 1227              		.align	1
 1228              		.global	convertCaps
 1229              		.syntax unified
ARM GAS  build/m3.s 			page 30


 1230              		.thumb
 1231              		.thumb_func
 1233              	convertCaps:
 1234              	.LVL112:
 1235              	.LFB18:
 155:src/embsysS20.h **** /**************Cipher Functions to clean up main******************/
 156:src/embsysS20.h **** void convertCaps(char* toConvert){
 1236              		.loc 3 156 34 is_stmt 1 view -0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
 1240              		@ link register save eliminated.
 157:src/embsysS20.h ****    if(*toConvert >= 'a' && *toConvert <= 'z')
 1241              		.loc 3 157 4 view .LVU282
 1242              		.loc 3 157 7 is_stmt 0 view .LVU283
 1243 0000 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 1244              		.loc 3 157 25 view .LVU284
 1245 0002 A2F16103 		sub	r3, r2, #97
 1246 0006 DBB2     		uxtb	r3, r3
 1247              		.loc 3 157 6 view .LVU285
 1248 0008 192B     		cmp	r3, #25
 1249 000a 01D8     		bhi	.L107
 158:src/embsysS20.h ****       *toConvert = (*toConvert - 'a') + 'A';
 1250              		.loc 3 158 7 is_stmt 1 view .LVU286
 1251              		.loc 3 158 39 is_stmt 0 view .LVU287
 1252 000c 203A     		subs	r2, r2, #32
 1253              		.loc 3 158 18 view .LVU288
 1254 000e 0270     		strb	r2, [r0]
 1255              	.L107:
 159:src/embsysS20.h **** }
 1256              		.loc 3 159 1 view .LVU289
 1257 0010 7047     		bx	lr
 1258              		.cfi_endproc
 1259              	.LFE18:
 1261              		.section	.text.encrypt,"ax",%progbits
 1262              		.align	1
 1263              		.global	encrypt
 1264              		.syntax unified
 1265              		.thumb
 1266              		.thumb_func
 1268              	encrypt:
 1269              	.LVL113:
 1270              	.LFB19:
 160:src/embsysS20.h **** //Encrypts with Vigenere cipher using 'key'
 161:src/embsysS20.h **** char encrypt(char toEncrypt){
 1271              		.loc 3 161 29 is_stmt 1 view -0
 1272              		.cfi_startproc
 1273              		@ args = 0, pretend = 0, frame = 0
 1274              		@ frame_needed = 0, uses_anonymous_args = 0
 1275              		@ link register save eliminated.
 162:src/embsysS20.h ****    static uint8_t pos = 0;
 1276              		.loc 3 162 4 view .LVU291
 163:src/embsysS20.h ****    
 164:src/embsysS20.h ****    toEncrypt = ((toEncrypt + key[pos]) % 26) + 'A';
 1277              		.loc 3 164 4 view .LVU292
 1278              		.loc 3 164 33 is_stmt 0 view .LVU293
 1279 0000 0C49     		ldr	r1, .L112
ARM GAS  build/m3.s 			page 31


 1280 0002 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 1281 0004 0C4B     		ldr	r3, .L112+4
 1282 0006 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1283              		.loc 3 164 28 view .LVU294
 1284 0008 1844     		add	r0, r0, r3
 1285              	.LVL114:
 1286              		.loc 3 164 40 view .LVU295
 1287 000a 0C4B     		ldr	r3, .L112+8
 1288 000c 83FB00C3 		smull	ip, r3, r3, r0
 1289 0010 DB10     		asrs	r3, r3, #3
 1290 0012 4FF01A0C 		mov	ip, #26
 1291 0016 0CFB1303 		mls	r3, ip, r3, r0
 1292              		.loc 3 164 46 view .LVU296
 1293 001a D8B2     		uxtb	r0, r3
 1294              		.loc 3 164 14 view .LVU297
 1295 001c 4130     		adds	r0, r0, #65
 1296 001e C0B2     		uxtb	r0, r0
 1297              	.LVL115:
 165:src/embsysS20.h ****    ++pos;
 1298              		.loc 3 165 4 is_stmt 1 view .LVU298
 1299 0020 531C     		adds	r3, r2, #1
 1300 0022 DBB2     		uxtb	r3, r3
 1301 0024 0B70     		strb	r3, [r1]
 166:src/embsysS20.h **** 
 167:src/embsysS20.h ****    pos = (pos == 21) ? 0 : pos;
 1302              		.loc 3 167 4 view .LVU299
 1303              		.loc 3 167 8 is_stmt 0 view .LVU300
 1304 0026 152B     		cmp	r3, #21
 1305 0028 02D0     		beq	.L111
 1306              	.L110:
 1307              		.loc 3 167 8 discriminator 4 view .LVU301
 1308 002a 024A     		ldr	r2, .L112
 1309 002c 1370     		strb	r3, [r2]
 168:src/embsysS20.h **** 
 169:src/embsysS20.h ****    return toEncrypt;
 1310              		.loc 3 169 4 is_stmt 1 discriminator 4 view .LVU302
 170:src/embsysS20.h **** }
 1311              		.loc 3 170 1 is_stmt 0 discriminator 4 view .LVU303
 1312 002e 7047     		bx	lr
 1313              	.L111:
 167:src/embsysS20.h **** 
 1314              		.loc 3 167 8 view .LVU304
 1315 0030 0023     		movs	r3, #0
 1316 0032 FAE7     		b	.L110
 1317              	.L113:
 1318              		.align	2
 1319              	.L112:
 1320 0034 00000000 		.word	pos.4
 1321 0038 00000000 		.word	key
 1322 003c 4FECC44E 		.word	1321528399
 1323              		.cfi_endproc
 1324              	.LFE19:
 1326              		.section	.text.decrypt,"ax",%progbits
 1327              		.align	1
 1328              		.global	decrypt
 1329              		.syntax unified
 1330              		.thumb
ARM GAS  build/m3.s 			page 32


 1331              		.thumb_func
 1333              	decrypt:
 1334              	.LVL116:
 1335              	.LFB20:
 171:src/embsysS20.h **** //Decrypts with Vigenere cipher using 'key'
 172:src/embsysS20.h **** char decrypt(char toDecrypt){
 1336              		.loc 3 172 29 is_stmt 1 view -0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 0
 1339              		@ frame_needed = 0, uses_anonymous_args = 0
 1340              		@ link register save eliminated.
 1341              		.loc 3 172 29 is_stmt 0 view .LVU306
 1342 0000 10B4     		push	{r4}
 1343              	.LCFI20:
 1344              		.cfi_def_cfa_offset 4
 1345              		.cfi_offset 4, -4
 173:src/embsysS20.h ****    static uint8_t pos = 0;
 1346              		.loc 3 173 4 is_stmt 1 view .LVU307
 174:src/embsysS20.h **** 
 175:src/embsysS20.h ****    toDecrypt = ((toDecrypt - key[pos] + 26) % 26) + 'A';
 1347              		.loc 3 175 4 view .LVU308
 1348              		.loc 3 175 33 is_stmt 0 view .LVU309
 1349 0002 0F4C     		ldr	r4, .L118
 1350 0004 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 1351 0006 0F4B     		ldr	r3, .L118+4
 1352 0008 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1353              		.loc 3 175 28 view .LVU310
 1354 000a C01A     		subs	r0, r0, r3
 1355              	.LVL117:
 1356              		.loc 3 175 39 view .LVU311
 1357 000c 1A30     		adds	r0, r0, #26
 1358              		.loc 3 175 45 view .LVU312
 1359 000e 0E49     		ldr	r1, .L118+8
 1360 0010 81FB0031 		smull	r3, r1, r1, r0
 1361 0014 C317     		asrs	r3, r0, #31
 1362 0016 C3EBE103 		rsb	r3, r3, r1, asr #3
 1363 001a 1A21     		movs	r1, #26
 1364 001c 01FB1303 		mls	r3, r1, r3, r0
 1365              		.loc 3 175 51 view .LVU313
 1366 0020 D8B2     		uxtb	r0, r3
 1367              		.loc 3 175 14 view .LVU314
 1368 0022 4130     		adds	r0, r0, #65
 1369 0024 C0B2     		uxtb	r0, r0
 1370              	.LVL118:
 176:src/embsysS20.h ****    ++pos;
 1371              		.loc 3 176 4 is_stmt 1 view .LVU315
 1372 0026 531C     		adds	r3, r2, #1
 1373 0028 DBB2     		uxtb	r3, r3
 1374 002a 2370     		strb	r3, [r4]
 177:src/embsysS20.h **** 
 178:src/embsysS20.h ****    pos = (pos == 21) ? 0 : pos;
 1375              		.loc 3 178 4 view .LVU316
 1376              		.loc 3 178 8 is_stmt 0 view .LVU317
 1377 002c 152B     		cmp	r3, #21
 1378 002e 04D0     		beq	.L117
 1379              	.L115:
 1380              		.loc 3 178 8 discriminator 4 view .LVU318
ARM GAS  build/m3.s 			page 33


 1381 0030 034A     		ldr	r2, .L118
 1382 0032 1370     		strb	r3, [r2]
 179:src/embsysS20.h **** 
 180:src/embsysS20.h ****    return toDecrypt;
 1383              		.loc 3 180 4 is_stmt 1 discriminator 4 view .LVU319
 181:src/embsysS20.h **** }
 1384              		.loc 3 181 1 is_stmt 0 discriminator 4 view .LVU320
 1385 0034 5DF8044B 		ldr	r4, [sp], #4
 1386              	.LCFI21:
 1387              		.cfi_remember_state
 1388              		.cfi_restore 4
 1389              		.cfi_def_cfa_offset 0
 1390 0038 7047     		bx	lr
 1391              	.L117:
 1392              	.LCFI22:
 1393              		.cfi_restore_state
 178:src/embsysS20.h **** 
 1394              		.loc 3 178 8 view .LVU321
 1395 003a 0023     		movs	r3, #0
 1396 003c F8E7     		b	.L115
 1397              	.L119:
 1398 003e 00BF     		.align	2
 1399              	.L118:
 1400 0040 00000000 		.word	pos.3
 1401 0044 00000000 		.word	key
 1402 0048 4FECC44E 		.word	1321528399
 1403              		.cfi_endproc
 1404              	.LFE20:
 1406              		.section	.text._write,"ax",%progbits
 1407              		.align	1
 1408              		.global	_write
 1409              		.syntax unified
 1410              		.thumb
 1411              		.thumb_func
 1413              	_write:
 1414              	.LVL119:
 1415              	.LFB22:
   1:src/m3.c      **** // HINT for TASK #2 -- FALL 2022
   2:src/m3.c      **** 
   3:src/m3.c      **** 
   4:src/m3.c      **** //************** I N C L U D E S *****************
   5:src/m3.c      **** 
   6:src/m3.c      ****        //PUT YOUR INCLUDES HERE
   7:src/m3.c      ****       #include <stdio.h>
   8:src/m3.c      ****       #include <string.h>
   9:src/m3.c      ****       #include <unistd.h>
  10:src/m3.c      ****       #include <errno.h>
  11:src/m3.c      ****       #include "embsysS20.h"
  12:src/m3.c      **** 
  13:src/m3.c      **** 
  14:src/m3.c      **** //************** G L O B A L S *****************
  15:src/m3.c      **** 
  16:src/m3.c      ****       // PUT YOUR GLOBAL VARIABLES HERE
  17:src/m3.c      ****       const int max = 1024;
  18:src/m3.c      **** //********* S U P P O R T     F U N C T I O N S *****************
  19:src/m3.c      **** 
  20:src/m3.c      **** void charHandler(char handle);
ARM GAS  build/m3.s 			page 34


  21:src/m3.c      **** void cipherHandler(char toDo);
  22:src/m3.c      **** void fixPeriod(char* commit);
  23:src/m3.c      **** //Available on the libopencm3 github example page
  24:src/m3.c      **** //Makes the USART2 port the STDOUT stream
  25:src/m3.c      **** int _write(int file, char* ptr, int len){
 1416              		.loc 1 25 41 is_stmt 1 view -0
 1417              		.cfi_startproc
 1418              		@ args = 0, pretend = 0, frame = 0
 1419              		@ frame_needed = 0, uses_anonymous_args = 0
 1420              		.loc 1 25 41 is_stmt 0 view .LVU323
 1421 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1422              	.LCFI23:
 1423              		.cfi_def_cfa_offset 24
 1424              		.cfi_offset 3, -24
 1425              		.cfi_offset 4, -20
 1426              		.cfi_offset 5, -16
 1427              		.cfi_offset 6, -12
 1428              		.cfi_offset 7, -8
 1429              		.cfi_offset 14, -4
  26:src/m3.c      ****     int i;
 1430              		.loc 1 26 5 is_stmt 1 view .LVU324
  27:src/m3.c      **** 
  28:src/m3.c      ****     if (file == STDOUT_FILENO || file == STDERR_FILENO){
 1431              		.loc 1 28 5 view .LVU325
 1432              		.loc 1 28 30 is_stmt 0 view .LVU326
 1433 0002 0138     		subs	r0, r0, #1
 1434              	.LVL120:
 1435              		.loc 1 28 8 view .LVU327
 1436 0004 0128     		cmp	r0, #1
 1437 0006 13D8     		bhi	.L129
 1438 0008 0D46     		mov	r5, r1
 1439 000a 1746     		mov	r7, r2
  29:src/m3.c      **** 	    for(i = 0; i < len; i++){
 1440              		.loc 1 29 12 view .LVU328
 1441 000c 0024     		movs	r4, #0
 1442 000e 04E0     		b	.L121
 1443              	.LVL121:
 1444              	.L123:
  30:src/m3.c      **** 		    if(ptr[i] == '\n')
  31:src/m3.c      **** 			    usart_send_blocking(USART2, '\r');
  32:src/m3.c      **** 
  33:src/m3.c      **** 		    usart_send_blocking(USART2, ptr[i]);
 1445              		.loc 1 33 7 is_stmt 1 discriminator 2 view .LVU329
 1446 0010 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 1447 0012 0B48     		ldr	r0, .L130
 1448 0014 FFF7FEFF 		bl	usart_send_blocking
 1449              	.LVL122:
  29:src/m3.c      **** 	    for(i = 0; i < len; i++){
 1450              		.loc 1 29 27 discriminator 2 view .LVU330
 1451 0018 0134     		adds	r4, r4, #1
 1452              	.LVL123:
 1453              	.L121:
  29:src/m3.c      **** 	    for(i = 0; i < len; i++){
 1454              		.loc 1 29 19 discriminator 1 view .LVU331
 1455 001a BC42     		cmp	r4, r7
 1456 001c 0EDA     		bge	.L120
  30:src/m3.c      **** 		    if(ptr[i] == '\n')
ARM GAS  build/m3.s 			page 35


 1457              		.loc 1 30 7 view .LVU332
  30:src/m3.c      **** 		    if(ptr[i] == '\n')
 1458              		.loc 1 30 13 is_stmt 0 view .LVU333
 1459 001e 2E19     		adds	r6, r5, r4
 1460 0020 2B5D     		ldrb	r3, [r5, r4]	@ zero_extendqisi2
  30:src/m3.c      **** 		    if(ptr[i] == '\n')
 1461              		.loc 1 30 9 view .LVU334
 1462 0022 0A2B     		cmp	r3, #10
 1463 0024 F4D1     		bne	.L123
  31:src/m3.c      **** 
 1464              		.loc 1 31 8 is_stmt 1 view .LVU335
 1465 0026 0D21     		movs	r1, #13
 1466 0028 0548     		ldr	r0, .L130
 1467 002a FFF7FEFF 		bl	usart_send_blocking
 1468              	.LVL124:
 1469 002e EFE7     		b	.L123
 1470              	.LVL125:
 1471              	.L129:
  34:src/m3.c      **** 	    }
  35:src/m3.c      **** 
  36:src/m3.c      **** 	    return i;
  37:src/m3.c      ****     }
  38:src/m3.c      **** 
  39:src/m3.c      ****     errno = EIO;
 1472              		.loc 1 39 4 view .LVU336
 1473              		.loc 1 39 6 is_stmt 0 view .LVU337
 1474 0030 FFF7FEFF 		bl	__errno
 1475              	.LVL126:
 1476              		.loc 1 39 10 view .LVU338
 1477 0034 0523     		movs	r3, #5
 1478 0036 0360     		str	r3, [r0]
  40:src/m3.c      ****     return -1;
 1479              		.loc 1 40 5 is_stmt 1 view .LVU339
 1480              		.loc 1 40 12 is_stmt 0 view .LVU340
 1481 0038 4FF0FF34 		mov	r4, #-1
 1482              	.L120:
  41:src/m3.c      **** }
 1483              		.loc 1 41 1 view .LVU341
 1484 003c 2046     		mov	r0, r4
 1485 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1486              	.L131:
 1487              		.align	2
 1488              	.L130:
 1489 0040 00440040 		.word	1073759232
 1490              		.cfi_endproc
 1491              	.LFE22:
 1493              		.section	.text.cipherHandler,"ax",%progbits
 1494              		.align	1
 1495              		.global	cipherHandler
 1496              		.syntax unified
 1497              		.thumb
 1498              		.thumb_func
 1500              	cipherHandler:
 1501              	.LVL127:
 1502              	.LFB25:
  42:src/m3.c      **** 
  43:src/m3.c      **** 
ARM GAS  build/m3.s 			page 36


  44:src/m3.c      **** 
  45:src/m3.c      **** int main(void)  {
  46:src/m3.c      ****    //Init buffers
  47:src/m3.c      ****    circbuffer_init(&circBufferIn, bufferI, max);
  48:src/m3.c      ****    circbuffer_init(&circBufferOut, bufferO, max);
  49:src/m3.c      ****   
  50:src/m3.c      ****    // initialize the hardware
  51:src/m3.c      ****    clock_enable();
  52:src/m3.c      ****    usart_setup(); 
  53:src/m3.c      ****    timer_setup();
  54:src/m3.c      **** 
  55:src/m3.c      ****    rcc_periph_clock_enable(RCC_GPIOA);
  56:src/m3.c      ****    rcc_periph_clock_enable(RCC_GPIOC);
  57:src/m3.c      ****    gpio_mode_setup(GPIOA, GPIO_MODE_OUTPUT, GPIO_PUPD_PULLUP, GPIO5);
  58:src/m3.c      ****    gpio_mode_setup(GPIOC, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, GPIO13);
  59:src/m3.c      **** 
  60:src/m3.c      **** 
  61:src/m3.c      ****    while(true)
  62:src/m3.c      ****    {
  63:src/m3.c      ****       if(!bufferIsEmpty(&circBufferIn))
  64:src/m3.c      ****       {
  65:src/m3.c      ****             char charSending = '\0';
  66:src/m3.c      ****             circbuffer_dequeue(&circBufferIn, &charSending);
  67:src/m3.c      ****             charHandler(charSending);
  68:src/m3.c      ****       }
  69:src/m3.c      ****    }
  70:src/m3.c      ****    return 0;    // NEVER EXECUTES
  71:src/m3.c      **** } 
  72:src/m3.c      **** 
  73:src/m3.c      **** void charHandler(char handle)
  74:src/m3.c      **** {
  75:src/m3.c      ****       static int myCase = 0;
  76:src/m3.c      ****       static char period[4] = {'1', '0', '0', '0'};
  77:src/m3.c      ****       static char lastPeriod[4] = {'1', '0', '0', '0'};
  78:src/m3.c      **** 
  79:src/m3.c      ****       if(handle == '!' && myCase != 3)
  80:src/m3.c      ****             ++myCase;
  81:src/m3.c      ****       else if(myCase == 3 && handle == 'L')
  82:src/m3.c      ****             myCase = 4;
  83:src/m3.c      ****       else if(myCase == 3 && handle == 'S')
  84:src/m3.c      ****             myCase = 5;
  85:src/m3.c      ****       else if(myCase == 3 && handle == '!')
  86:src/m3.c      ****             myCase = 10;
  87:src/m3.c      ****       
  88:src/m3.c      ****       else if(myCase < 6)
  89:src/m3.c      ****             myCase = 0;
  90:src/m3.c      ****       else if(myCase >= 6 && (handle < 0x30 || handle > 0x39)){
  91:src/m3.c      ****             myCase = 0;
  92:src/m3.c      ****             printf("Invalid!");
  93:src/m3.c      **** 
  94:src/m3.c      ****             for(int i = 0; i < 4; i++)
  95:src/m3.c      ****                   period[i] = lastPeriod[i];
  96:src/m3.c      ****             return;
  97:src/m3.c      ****       }
  98:src/m3.c      **** 
  99:src/m3.c      ****       switch (myCase)
 100:src/m3.c      ****       {
ARM GAS  build/m3.s 			page 37


 101:src/m3.c      ****       case 0:
 102:src/m3.c      ****             cipherHandler(handle);
 103:src/m3.c      ****             break;
 104:src/m3.c      ****       case 1:
 105:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 106:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 107:src/m3.c      ****             break;
 108:src/m3.c      ****       case 2:
 109:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 110:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 111:src/m3.c      ****             break;
 112:src/m3.c      ****       case 3:
 113:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 114:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 115:src/m3.c      ****             break;
 116:src/m3.c      ****       case 4:
 117:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 118:src/m3.c      **** 
 119:src/m3.c      ****             for (int i = 0; i < 4; i++)
 120:src/m3.c      ****             {
 121:src/m3.c      ****                   circbuffer_queue(&circBufferOut, period[i]);
 122:src/m3.c      ****             }           
 123:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 124:src/m3.c      ****             myCase = 0;
 125:src/m3.c      ****             break;
 126:src/m3.c      ****       case 5:
 127:src/m3.c      ****             ++myCase;
 128:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 129:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 130:src/m3.c      ****             break;
 131:src/m3.c      ****       case 6:
 132:src/m3.c      ****             ++myCase;
 133:src/m3.c      ****             period[0] = handle;
 134:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 135:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 136:src/m3.c      ****             break;
 137:src/m3.c      ****       case 7:
 138:src/m3.c      ****             ++myCase;
 139:src/m3.c      ****             period[1] = handle;
 140:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 141:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 142:src/m3.c      ****             break;
 143:src/m3.c      ****       case 8:
 144:src/m3.c      ****             ++myCase;
 145:src/m3.c      ****             period[2] = handle;
 146:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 147:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 148:src/m3.c      ****             break;
 149:src/m3.c      ****       case 9:
 150:src/m3.c      ****             myCase = 0;
 151:src/m3.c      ****             period[3] = handle;
 152:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 153:src/m3.c      ****             fixPeriod(period);
 154:src/m3.c      ****             for (int i = 0; i < 4; i++)
 155:src/m3.c      ****             {
 156:src/m3.c      ****                   lastPeriod[i] = period[i];
 157:src/m3.c      ****             }
ARM GAS  build/m3.s 			page 38


 158:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 159:src/m3.c      ****             break;
 160:src/m3.c      ****       case 10:
 161:src/m3.c      ****             myCase = 3;
 162:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 163:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 164:src/m3.c      ****             break;
 165:src/m3.c      ****       }
 166:src/m3.c      **** }
 167:src/m3.c      **** 
 168:src/m3.c      **** void cipherHandler(char toDo)
 169:src/m3.c      **** {
 1503              		.loc 1 169 1 is_stmt 1 view -0
 1504              		.cfi_startproc
 1505              		@ args = 0, pretend = 0, frame = 8
 1506              		@ frame_needed = 0, uses_anonymous_args = 0
 1507              		.loc 1 169 1 is_stmt 0 view .LVU343
 1508 0000 00B5     		push	{lr}
 1509              	.LCFI24:
 1510              		.cfi_def_cfa_offset 4
 1511              		.cfi_offset 14, -4
 1512 0002 83B0     		sub	sp, sp, #12
 1513              	.LCFI25:
 1514              		.cfi_def_cfa_offset 16
 1515 0004 8DF80700 		strb	r0, [sp, #7]
 170:src/m3.c      ****       convertCaps(&toDo);
 1516              		.loc 1 170 7 is_stmt 1 view .LVU344
 1517 0008 0DF10700 		add	r0, sp, #7
 1518              	.LVL128:
 1519              		.loc 1 170 7 is_stmt 0 view .LVU345
 1520 000c FFF7FEFF 		bl	convertCaps
 1521              	.LVL129:
 171:src/m3.c      **** 
 172:src/m3.c      ****       if(IS_B1_PRESSED)
 1522              		.loc 1 172 7 is_stmt 1 view .LVU346
 1523              		.loc 1 172 11 is_stmt 0 view .LVU347
 1524 0010 4FF40051 		mov	r1, #8192
 1525 0014 0D48     		ldr	r0, .L136
 1526 0016 FFF7FEFF 		bl	gpio_get
 1527              	.LVL130:
 1528              		.loc 1 172 9 view .LVU348
 1529 001a 80B9     		cbnz	r0, .L133
 173:src/m3.c      ****             toDo = decrypt(toDo);
 1530              		.loc 1 173 13 is_stmt 1 view .LVU349
 1531              		.loc 1 173 20 is_stmt 0 view .LVU350
 1532 001c 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1533 0020 FFF7FEFF 		bl	decrypt
 1534              	.LVL131:
 1535              		.loc 1 173 18 view .LVU351
 1536 0024 8DF80700 		strb	r0, [sp, #7]
 1537              	.L134:
 174:src/m3.c      ****       else
 175:src/m3.c      ****             toDo = encrypt(toDo);
 176:src/m3.c      **** 
 177:src/m3.c      ****       circbuffer_queue(&circBufferIn, toDo);
 1538              		.loc 1 177 7 is_stmt 1 view .LVU352
 1539 0028 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
ARM GAS  build/m3.s 			page 39


 1540 002c 0848     		ldr	r0, .L136+4
 1541 002e FFF7FEFF 		bl	circbuffer_queue
 1542              	.LVL132:
 178:src/m3.c      ****       usart_enable_tx_interrupt(USART2);
 1543              		.loc 1 178 7 view .LVU353
 1544 0032 0848     		ldr	r0, .L136+8
 1545 0034 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1546              	.LVL133:
 179:src/m3.c      **** }
 1547              		.loc 1 179 1 is_stmt 0 view .LVU354
 1548 0038 03B0     		add	sp, sp, #12
 1549              	.LCFI26:
 1550              		.cfi_remember_state
 1551              		.cfi_def_cfa_offset 4
 1552              		@ sp needed
 1553 003a 5DF804FB 		ldr	pc, [sp], #4
 1554              	.L133:
 1555              	.LCFI27:
 1556              		.cfi_restore_state
 175:src/m3.c      **** 
 1557              		.loc 1 175 13 is_stmt 1 view .LVU355
 175:src/m3.c      **** 
 1558              		.loc 1 175 20 is_stmt 0 view .LVU356
 1559 003e 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1560 0042 FFF7FEFF 		bl	encrypt
 1561              	.LVL134:
 175:src/m3.c      **** 
 1562              		.loc 1 175 18 view .LVU357
 1563 0046 8DF80700 		strb	r0, [sp, #7]
 1564 004a EDE7     		b	.L134
 1565              	.L137:
 1566              		.align	2
 1567              	.L136:
 1568 004c 00080048 		.word	1207961600
 1569 0050 00000000 		.word	circBufferIn
 1570 0054 00440040 		.word	1073759232
 1571              		.cfi_endproc
 1572              	.LFE25:
 1574              		.section	.rodata.fixPeriod.str1.4,"aMS",%progbits,1
 1575              		.align	2
 1576              	.LC8:
 1577 0000 30303030 		.ascii	"0000\000"
 1577      00
 1578              		.section	.text.fixPeriod,"ax",%progbits
 1579              		.align	1
 1580              		.global	fixPeriod
 1581              		.syntax unified
 1582              		.thumb
 1583              		.thumb_func
 1585              	fixPeriod:
 1586              	.LVL135:
 1587              	.LFB26:
 180:src/m3.c      **** 
 181:src/m3.c      **** void fixPeriod(char* commit)
 182:src/m3.c      **** {
 1588              		.loc 1 182 1 is_stmt 1 view -0
 1589              		.cfi_startproc
ARM GAS  build/m3.s 			page 40


 1590              		@ args = 0, pretend = 0, frame = 8
 1591              		@ frame_needed = 0, uses_anonymous_args = 0
 1592              		.loc 1 182 1 is_stmt 0 view .LVU359
 1593 0000 00B5     		push	{lr}
 1594              	.LCFI28:
 1595              		.cfi_def_cfa_offset 4
 1596              		.cfi_offset 14, -4
 1597 0002 83B0     		sub	sp, sp, #12
 1598              	.LCFI29:
 1599              		.cfi_def_cfa_offset 16
 1600 0004 8446     		mov	ip, r0
 183:src/m3.c      ****       char convert[5] = {'0','0','0','0','\0'};
 1601              		.loc 1 183 7 is_stmt 1 view .LVU360
 1602              		.loc 1 183 12 is_stmt 0 view .LVU361
 1603 0006 0D4B     		ldr	r3, .L142
 1604 0008 93E80300 		ldm	r3, {r0, r1}
 1605              	.LVL136:
 1606              		.loc 1 183 12 view .LVU362
 1607 000c 0090     		str	r0, [sp]
 1608 000e 8DF80410 		strb	r1, [sp, #4]
 184:src/m3.c      **** 
 185:src/m3.c      ****       for (int i = 0; i < 4; i++)
 1609              		.loc 1 185 7 is_stmt 1 view .LVU363
 1610              	.LBB3:
 1611              		.loc 1 185 12 view .LVU364
 1612              	.LVL137:
 1613              		.loc 1 185 16 is_stmt 0 view .LVU365
 1614 0012 0023     		movs	r3, #0
 1615              		.loc 1 185 7 view .LVU366
 1616 0014 07E0     		b	.L139
 1617              	.LVL138:
 1618              	.L140:
 186:src/m3.c      ****       {
 187:src/m3.c      ****             convert[i] = commit[i];
 1619              		.loc 1 187 13 is_stmt 1 discriminator 3 view .LVU367
 1620              		.loc 1 187 32 is_stmt 0 discriminator 3 view .LVU368
 1621 0016 1CF80310 		ldrb	r1, [ip, r3]	@ zero_extendqisi2
 1622              		.loc 1 187 24 discriminator 3 view .LVU369
 1623 001a 03F10802 		add	r2, r3, #8
 1624 001e 6A44     		add	r2, sp, r2
 1625 0020 02F8081C 		strb	r1, [r2, #-8]
 185:src/m3.c      ****       {
 1626              		.loc 1 185 31 is_stmt 1 discriminator 3 view .LVU370
 1627 0024 0133     		adds	r3, r3, #1
 1628              	.LVL139:
 1629              	.L139:
 185:src/m3.c      ****       {
 1630              		.loc 1 185 25 discriminator 1 view .LVU371
 1631 0026 032B     		cmp	r3, #3
 1632 0028 F5DD     		ble	.L140
 1633              	.LBE3:
 188:src/m3.c      ****       }
 189:src/m3.c      **** 
 190:src/m3.c      ****       int period = atoi(convert);
 1634              		.loc 1 190 7 view .LVU372
 1635              		.loc 1 190 20 is_stmt 0 view .LVU373
 1636 002a 6846     		mov	r0, sp
ARM GAS  build/m3.s 			page 41


 1637 002c FFF7FEFF 		bl	atoi
 1638              	.LVL140:
 191:src/m3.c      ****       globalPeriod = period;
 1639              		.loc 1 191 7 is_stmt 1 view .LVU374
 1640              		.loc 1 191 20 is_stmt 0 view .LVU375
 1641 0030 034B     		ldr	r3, .L142+4
 1642 0032 1880     		strh	r0, [r3]	@ movhi
 192:src/m3.c      ****       
 193:src/m3.c      **** }...
 1643              		.loc 1 193 1 view .LVU376
 1644 0034 03B0     		add	sp, sp, #12
 1645              	.LCFI30:
 1646              		.cfi_def_cfa_offset 4
 1647              		@ sp needed
 1648 0036 5DF804FB 		ldr	pc, [sp], #4
 1649              	.L143:
 1650 003a 00BF     		.align	2
 1651              	.L142:
 1652 003c 00000000 		.word	.LC8
 1653 0040 00000000 		.word	globalPeriod
 1654              		.cfi_endproc
 1655              	.LFE26:
 1657              		.section	.rodata.charHandler.str1.4,"aMS",%progbits,1
 1658              		.align	2
 1659              	.LC9:
 1660 0000 496E7661 		.ascii	"Invalid!\000"
 1660      6C696421 
 1660      00
 1661              		.section	.text.charHandler,"ax",%progbits
 1662              		.align	1
 1663              		.global	charHandler
 1664              		.syntax unified
 1665              		.thumb
 1666              		.thumb_func
 1668              	charHandler:
 1669              	.LVL141:
 1670              	.LFB24:
  74:src/m3.c      **** {
 1671              		.loc 1 74 1 is_stmt 1 view -0
 1672              		.cfi_startproc
 1673              		@ args = 0, pretend = 0, frame = 0
 1674              		@ frame_needed = 0, uses_anonymous_args = 0
  74:src/m3.c      **** {
 1675              		.loc 1 74 1 is_stmt 0 view .LVU378
 1676 0000 38B5     		push	{r3, r4, r5, lr}
 1677              	.LCFI31:
 1678              		.cfi_def_cfa_offset 16
 1679              		.cfi_offset 3, -16
 1680              		.cfi_offset 4, -12
 1681              		.cfi_offset 5, -8
 1682              		.cfi_offset 14, -4
 1683 0002 0146     		mov	r1, r0
  75:src/m3.c      ****       static int myCase = 0;
 1684              		.loc 1 75 7 is_stmt 1 view .LVU379
  76:src/m3.c      ****       static char period[4] = {'1', '0', '0', '0'};
 1685              		.loc 1 76 7 view .LVU380
  77:src/m3.c      ****       static char lastPeriod[4] = {'1', '0', '0', '0'};
ARM GAS  build/m3.s 			page 42


 1686              		.loc 1 77 7 view .LVU381
  79:src/m3.c      ****       if(handle == '!' && myCase != 3)
 1687              		.loc 1 79 7 view .LVU382
  79:src/m3.c      ****       if(handle == '!' && myCase != 3)
 1688              		.loc 1 79 9 is_stmt 0 view .LVU383
 1689 0004 2128     		cmp	r0, #33
 1690 0006 18D0     		beq	.L172
 1691              	.L145:
  81:src/m3.c      ****       else if(myCase == 3 && handle == 'L')
 1692              		.loc 1 81 12 is_stmt 1 view .LVU384
  81:src/m3.c      ****       else if(myCase == 3 && handle == 'L')
 1693              		.loc 1 81 22 is_stmt 0 view .LVU385
 1694 0008 624B     		ldr	r3, .L176
 1695 000a 1B68     		ldr	r3, [r3]
  81:src/m3.c      ****       else if(myCase == 3 && handle == 'L')
 1696              		.loc 1 81 14 view .LVU386
 1697 000c 032B     		cmp	r3, #3
 1698 000e 1CD0     		beq	.L173
 1699              	.L147:
  83:src/m3.c      ****       else if(myCase == 3 && handle == 'S')
 1700              		.loc 1 83 12 is_stmt 1 view .LVU387
  83:src/m3.c      ****       else if(myCase == 3 && handle == 'S')
 1701              		.loc 1 83 14 is_stmt 0 view .LVU388
 1702 0010 032B     		cmp	r3, #3
 1703 0012 20D0     		beq	.L174
 1704              	.L148:
  85:src/m3.c      ****       else if(myCase == 3 && handle == '!')
 1705              		.loc 1 85 12 is_stmt 1 view .LVU389
  85:src/m3.c      ****       else if(myCase == 3 && handle == '!')
 1706              		.loc 1 85 14 is_stmt 0 view .LVU390
 1707 0014 032B     		cmp	r3, #3
 1708 0016 24D0     		beq	.L175
 1709              	.L149:
  88:src/m3.c      ****       else if(myCase < 6)
 1710              		.loc 1 88 12 is_stmt 1 view .LVU391
  88:src/m3.c      ****       else if(myCase < 6)
 1711              		.loc 1 88 14 is_stmt 0 view .LVU392
 1712 0018 052B     		cmp	r3, #5
 1713 001a 28DC     		bgt	.L150
  89:src/m3.c      ****             myCase = 0;
 1714              		.loc 1 89 13 is_stmt 1 view .LVU393
  89:src/m3.c      ****             myCase = 0;
 1715              		.loc 1 89 20 is_stmt 0 view .LVU394
 1716 001c 5D4B     		ldr	r3, .L176
 1717 001e 0022     		movs	r2, #0
 1718 0020 1A60     		str	r2, [r3]
 1719              	.L146:
  99:src/m3.c      ****       switch (myCase)
 1720              		.loc 1 99 7 is_stmt 1 view .LVU395
 1721 0022 5C4B     		ldr	r3, .L176
 1722 0024 1B68     		ldr	r3, [r3]
 1723 0026 0A2B     		cmp	r3, #10
 1724 0028 39D8     		bhi	.L144
 1725 002a DFE803F0 		tbb	[pc, r3]
 1726              	.L155:
 1727 002e 35       		.byte	(.L165-.L155)/2
 1728 002f 39       		.byte	(.L164-.L155)/2
ARM GAS  build/m3.s 			page 43


 1729 0030 40       		.byte	(.L163-.L155)/2
 1730 0031 47       		.byte	(.L162-.L155)/2
 1731 0032 4E       		.byte	(.L161-.L155)/2
 1732 0033 62       		.byte	(.L160-.L155)/2
 1733 0034 6C       		.byte	(.L159-.L155)/2
 1734 0035 78       		.byte	(.L158-.L155)/2
 1735 0036 84       		.byte	(.L157-.L155)/2
 1736 0037 90       		.byte	(.L156-.L155)/2
 1737 0038 A8       		.byte	(.L154-.L155)/2
 1738 0039 00       		.p2align 1
 1739              	.L172:
  79:src/m3.c      ****       if(handle == '!' && myCase != 3)
 1740              		.loc 1 79 34 is_stmt 0 discriminator 1 view .LVU396
 1741 003a 564B     		ldr	r3, .L176
 1742 003c 1B68     		ldr	r3, [r3]
  79:src/m3.c      ****       if(handle == '!' && myCase != 3)
 1743              		.loc 1 79 24 discriminator 1 view .LVU397
 1744 003e 032B     		cmp	r3, #3
 1745 0040 E2D0     		beq	.L145
  80:src/m3.c      ****             ++myCase;
 1746              		.loc 1 80 13 is_stmt 1 view .LVU398
 1747 0042 0133     		adds	r3, r3, #1
 1748 0044 534A     		ldr	r2, .L176
 1749 0046 1360     		str	r3, [r2]
 1750 0048 EBE7     		b	.L146
 1751              	.L173:
  81:src/m3.c      ****       else if(myCase == 3 && handle == 'L')
 1752              		.loc 1 81 27 is_stmt 0 discriminator 1 view .LVU399
 1753 004a 4C29     		cmp	r1, #76
 1754 004c E0D1     		bne	.L147
  82:src/m3.c      ****             myCase = 4;
 1755              		.loc 1 82 13 is_stmt 1 view .LVU400
  82:src/m3.c      ****             myCase = 4;
 1756              		.loc 1 82 20 is_stmt 0 view .LVU401
 1757 004e 514B     		ldr	r3, .L176
 1758 0050 0422     		movs	r2, #4
 1759 0052 1A60     		str	r2, [r3]
 1760 0054 E5E7     		b	.L146
 1761              	.L174:
  83:src/m3.c      ****       else if(myCase == 3 && handle == 'S')
 1762              		.loc 1 83 27 discriminator 1 view .LVU402
 1763 0056 5329     		cmp	r1, #83
 1764 0058 DCD1     		bne	.L148
  84:src/m3.c      ****             myCase = 5;
 1765              		.loc 1 84 13 is_stmt 1 view .LVU403
  84:src/m3.c      ****             myCase = 5;
 1766              		.loc 1 84 20 is_stmt 0 view .LVU404
 1767 005a 4E4B     		ldr	r3, .L176
 1768 005c 0522     		movs	r2, #5
 1769 005e 1A60     		str	r2, [r3]
 1770 0060 DFE7     		b	.L146
 1771              	.L175:
  85:src/m3.c      ****       else if(myCase == 3 && handle == '!')
 1772              		.loc 1 85 27 discriminator 1 view .LVU405
 1773 0062 2129     		cmp	r1, #33
 1774 0064 D8D1     		bne	.L149
  86:src/m3.c      ****             myCase = 10;
ARM GAS  build/m3.s 			page 44


 1775              		.loc 1 86 13 is_stmt 1 view .LVU406
  86:src/m3.c      ****             myCase = 10;
 1776              		.loc 1 86 20 is_stmt 0 view .LVU407
 1777 0066 4B4B     		ldr	r3, .L176
 1778 0068 0A22     		movs	r2, #10
 1779 006a 1A60     		str	r2, [r3]
 1780 006c D9E7     		b	.L146
 1781              	.L150:
  90:src/m3.c      ****       else if(myCase >= 6 && (handle < 0x30 || handle > 0x39)){
 1782              		.loc 1 90 12 is_stmt 1 discriminator 1 view .LVU408
  90:src/m3.c      ****       else if(myCase >= 6 && (handle < 0x30 || handle > 0x39)){
 1783              		.loc 1 90 45 is_stmt 0 discriminator 1 view .LVU409
 1784 006e A1F13003 		sub	r3, r1, #48
 1785 0072 DBB2     		uxtb	r3, r3
  90:src/m3.c      ****       else if(myCase >= 6 && (handle < 0x30 || handle > 0x39)){
 1786              		.loc 1 90 27 discriminator 1 view .LVU410
 1787 0074 092B     		cmp	r3, #9
 1788 0076 D4D9     		bls	.L146
  91:src/m3.c      ****             myCase = 0;
 1789              		.loc 1 91 13 is_stmt 1 view .LVU411
  91:src/m3.c      ****             myCase = 0;
 1790              		.loc 1 91 20 is_stmt 0 view .LVU412
 1791 0078 0024     		movs	r4, #0
 1792 007a 464B     		ldr	r3, .L176
 1793 007c 1C60     		str	r4, [r3]
  92:src/m3.c      ****             printf("Invalid!");
 1794              		.loc 1 92 13 is_stmt 1 view .LVU413
 1795 007e 4648     		ldr	r0, .L176+4
 1796              	.LVL142:
  92:src/m3.c      ****             printf("Invalid!");
 1797              		.loc 1 92 13 is_stmt 0 view .LVU414
 1798 0080 FFF7FEFF 		bl	printf
 1799              	.LVL143:
  94:src/m3.c      ****             for(int i = 0; i < 4; i++)
 1800              		.loc 1 94 13 is_stmt 1 view .LVU415
 1801              	.LBB4:
  94:src/m3.c      ****             for(int i = 0; i < 4; i++)
 1802              		.loc 1 94 17 view .LVU416
  94:src/m3.c      ****             for(int i = 0; i < 4; i++)
 1803              		.loc 1 94 21 is_stmt 0 view .LVU417
 1804 0084 2346     		mov	r3, r4
  94:src/m3.c      ****             for(int i = 0; i < 4; i++)
 1805              		.loc 1 94 13 view .LVU418
 1806 0086 04E0     		b	.L151
 1807              	.LVL144:
 1808              	.L152:
  95:src/m3.c      ****                   period[i] = lastPeriod[i];
 1809              		.loc 1 95 19 is_stmt 1 discriminator 3 view .LVU419
  95:src/m3.c      ****                   period[i] = lastPeriod[i];
 1810              		.loc 1 95 41 is_stmt 0 discriminator 3 view .LVU420
 1811 0088 444A     		ldr	r2, .L176+8
 1812 008a D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
  95:src/m3.c      ****                   period[i] = lastPeriod[i];
 1813              		.loc 1 95 29 discriminator 3 view .LVU421
 1814 008c 444A     		ldr	r2, .L176+12
 1815 008e D154     		strb	r1, [r2, r3]
  94:src/m3.c      ****             for(int i = 0; i < 4; i++)
ARM GAS  build/m3.s 			page 45


 1816              		.loc 1 94 36 is_stmt 1 discriminator 3 view .LVU422
 1817 0090 0133     		adds	r3, r3, #1
 1818              	.LVL145:
 1819              	.L151:
  94:src/m3.c      ****             for(int i = 0; i < 4; i++)
 1820              		.loc 1 94 30 discriminator 1 view .LVU423
 1821 0092 032B     		cmp	r3, #3
 1822 0094 F8DD     		ble	.L152
 1823 0096 02E0     		b	.L144
 1824              	.LVL146:
 1825              	.L165:
  94:src/m3.c      ****             for(int i = 0; i < 4; i++)
 1826              		.loc 1 94 30 is_stmt 0 discriminator 1 view .LVU424
 1827              	.LBE4:
 102:src/m3.c      ****             cipherHandler(handle);
 1828              		.loc 1 102 13 is_stmt 1 view .LVU425
 1829 0098 0846     		mov	r0, r1
 1830              	.LVL147:
 102:src/m3.c      ****             cipherHandler(handle);
 1831              		.loc 1 102 13 is_stmt 0 view .LVU426
 1832 009a FFF7FEFF 		bl	cipherHandler
 1833              	.LVL148:
 103:src/m3.c      ****             break;
 1834              		.loc 1 103 13 is_stmt 1 view .LVU427
 1835              	.L144:
 166:src/m3.c      **** }
 1836              		.loc 1 166 1 is_stmt 0 view .LVU428
 1837 009e 38BD     		pop	{r3, r4, r5, pc}
 1838              	.LVL149:
 1839              	.L164:
 105:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1840              		.loc 1 105 13 is_stmt 1 view .LVU429
 1841 00a0 4048     		ldr	r0, .L176+16
 1842              	.LVL150:
 105:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1843              		.loc 1 105 13 is_stmt 0 view .LVU430
 1844 00a2 FFF7FEFF 		bl	circbuffer_queue
 1845              	.LVL151:
 106:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 1846              		.loc 1 106 13 is_stmt 1 view .LVU431
 1847 00a6 4048     		ldr	r0, .L176+20
 1848 00a8 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1849              	.LVL152:
 107:src/m3.c      ****             break;
 1850              		.loc 1 107 13 view .LVU432
 1851 00ac F7E7     		b	.L144
 1852              	.LVL153:
 1853              	.L163:
 109:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1854              		.loc 1 109 13 view .LVU433
 1855 00ae 3D48     		ldr	r0, .L176+16
 1856              	.LVL154:
 109:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1857              		.loc 1 109 13 is_stmt 0 view .LVU434
 1858 00b0 FFF7FEFF 		bl	circbuffer_queue
 1859              	.LVL155:
 110:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
ARM GAS  build/m3.s 			page 46


 1860              		.loc 1 110 13 is_stmt 1 view .LVU435
 1861 00b4 3C48     		ldr	r0, .L176+20
 1862 00b6 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1863              	.LVL156:
 111:src/m3.c      ****             break;
 1864              		.loc 1 111 13 view .LVU436
 1865 00ba F0E7     		b	.L144
 1866              	.LVL157:
 1867              	.L162:
 113:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1868              		.loc 1 113 13 view .LVU437
 1869 00bc 3948     		ldr	r0, .L176+16
 1870              	.LVL158:
 113:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1871              		.loc 1 113 13 is_stmt 0 view .LVU438
 1872 00be FFF7FEFF 		bl	circbuffer_queue
 1873              	.LVL159:
 114:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 1874              		.loc 1 114 13 is_stmt 1 view .LVU439
 1875 00c2 3948     		ldr	r0, .L176+20
 1876 00c4 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1877              	.LVL160:
 115:src/m3.c      ****             break;
 1878              		.loc 1 115 13 view .LVU440
 1879 00c8 E9E7     		b	.L144
 1880              	.LVL161:
 1881              	.L161:
 117:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1882              		.loc 1 117 13 view .LVU441
 1883 00ca 3648     		ldr	r0, .L176+16
 1884              	.LVL162:
 117:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1885              		.loc 1 117 13 is_stmt 0 view .LVU442
 1886 00cc FFF7FEFF 		bl	circbuffer_queue
 1887              	.LVL163:
 119:src/m3.c      ****             for (int i = 0; i < 4; i++)
 1888              		.loc 1 119 13 is_stmt 1 view .LVU443
 1889              	.LBB5:
 119:src/m3.c      ****             for (int i = 0; i < 4; i++)
 1890              		.loc 1 119 18 view .LVU444
 119:src/m3.c      ****             for (int i = 0; i < 4; i++)
 1891              		.loc 1 119 22 is_stmt 0 view .LVU445
 1892 00d0 0024     		movs	r4, #0
 119:src/m3.c      ****             for (int i = 0; i < 4; i++)
 1893              		.loc 1 119 13 view .LVU446
 1894 00d2 05E0     		b	.L166
 1895              	.LVL164:
 1896              	.L167:
 121:src/m3.c      ****                   circbuffer_queue(&circBufferOut, period[i]);
 1897              		.loc 1 121 19 is_stmt 1 discriminator 3 view .LVU447
 1898 00d4 324B     		ldr	r3, .L176+12
 1899 00d6 195D     		ldrb	r1, [r3, r4]	@ zero_extendqisi2
 1900 00d8 3248     		ldr	r0, .L176+16
 1901 00da FFF7FEFF 		bl	circbuffer_queue
 1902              	.LVL165:
 119:src/m3.c      ****             for (int i = 0; i < 4; i++)
 1903              		.loc 1 119 37 discriminator 3 view .LVU448
ARM GAS  build/m3.s 			page 47


 1904 00de 0134     		adds	r4, r4, #1
 1905              	.LVL166:
 1906              	.L166:
 119:src/m3.c      ****             for (int i = 0; i < 4; i++)
 1907              		.loc 1 119 31 discriminator 1 view .LVU449
 1908 00e0 032C     		cmp	r4, #3
 1909 00e2 F7DD     		ble	.L167
 1910              	.LBE5:
 123:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 1911              		.loc 1 123 13 view .LVU450
 1912 00e4 3048     		ldr	r0, .L176+20
 1913 00e6 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1914              	.LVL167:
 124:src/m3.c      ****             myCase = 0;
 1915              		.loc 1 124 13 view .LVU451
 124:src/m3.c      ****             myCase = 0;
 1916              		.loc 1 124 20 is_stmt 0 view .LVU452
 1917 00ea 2A4B     		ldr	r3, .L176
 1918 00ec 0022     		movs	r2, #0
 1919 00ee 1A60     		str	r2, [r3]
 125:src/m3.c      ****             break;
 1920              		.loc 1 125 13 is_stmt 1 view .LVU453
 1921 00f0 D5E7     		b	.L144
 1922              	.LVL168:
 1923              	.L160:
 127:src/m3.c      ****             ++myCase;
 1924              		.loc 1 127 13 view .LVU454
 1925 00f2 0133     		adds	r3, r3, #1
 1926 00f4 274A     		ldr	r2, .L176
 1927 00f6 1360     		str	r3, [r2]
 128:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1928              		.loc 1 128 13 view .LVU455
 1929 00f8 2A48     		ldr	r0, .L176+16
 1930              	.LVL169:
 128:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1931              		.loc 1 128 13 is_stmt 0 view .LVU456
 1932 00fa FFF7FEFF 		bl	circbuffer_queue
 1933              	.LVL170:
 129:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 1934              		.loc 1 129 13 is_stmt 1 view .LVU457
 1935 00fe 2A48     		ldr	r0, .L176+20
 1936 0100 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1937              	.LVL171:
 130:src/m3.c      ****             break;
 1938              		.loc 1 130 13 view .LVU458
 1939 0104 CBE7     		b	.L144
 1940              	.LVL172:
 1941              	.L159:
 132:src/m3.c      ****             ++myCase;
 1942              		.loc 1 132 13 view .LVU459
 1943 0106 0133     		adds	r3, r3, #1
 1944 0108 224A     		ldr	r2, .L176
 1945 010a 1360     		str	r3, [r2]
 133:src/m3.c      ****             period[0] = handle;
 1946              		.loc 1 133 13 view .LVU460
 133:src/m3.c      ****             period[0] = handle;
 1947              		.loc 1 133 23 is_stmt 0 view .LVU461
ARM GAS  build/m3.s 			page 48


 1948 010c 244B     		ldr	r3, .L176+12
 1949 010e 1970     		strb	r1, [r3]
 134:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1950              		.loc 1 134 13 is_stmt 1 view .LVU462
 1951 0110 2448     		ldr	r0, .L176+16
 1952              	.LVL173:
 134:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1953              		.loc 1 134 13 is_stmt 0 view .LVU463
 1954 0112 FFF7FEFF 		bl	circbuffer_queue
 1955              	.LVL174:
 135:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 1956              		.loc 1 135 13 is_stmt 1 view .LVU464
 1957 0116 2448     		ldr	r0, .L176+20
 1958 0118 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1959              	.LVL175:
 136:src/m3.c      ****             break;
 1960              		.loc 1 136 13 view .LVU465
 1961 011c BFE7     		b	.L144
 1962              	.LVL176:
 1963              	.L158:
 138:src/m3.c      ****             ++myCase;
 1964              		.loc 1 138 13 view .LVU466
 1965 011e 0133     		adds	r3, r3, #1
 1966 0120 1C4A     		ldr	r2, .L176
 1967 0122 1360     		str	r3, [r2]
 139:src/m3.c      ****             period[1] = handle;
 1968              		.loc 1 139 13 view .LVU467
 139:src/m3.c      ****             period[1] = handle;
 1969              		.loc 1 139 23 is_stmt 0 view .LVU468
 1970 0124 1E4B     		ldr	r3, .L176+12
 1971 0126 5970     		strb	r1, [r3, #1]
 140:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1972              		.loc 1 140 13 is_stmt 1 view .LVU469
 1973 0128 1E48     		ldr	r0, .L176+16
 1974              	.LVL177:
 140:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1975              		.loc 1 140 13 is_stmt 0 view .LVU470
 1976 012a FFF7FEFF 		bl	circbuffer_queue
 1977              	.LVL178:
 141:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 1978              		.loc 1 141 13 is_stmt 1 view .LVU471
 1979 012e 1E48     		ldr	r0, .L176+20
 1980 0130 FFF7FEFF 		bl	usart_enable_tx_interrupt
 1981              	.LVL179:
 142:src/m3.c      ****             break;
 1982              		.loc 1 142 13 view .LVU472
 1983 0134 B3E7     		b	.L144
 1984              	.LVL180:
 1985              	.L157:
 144:src/m3.c      ****             ++myCase;
 1986              		.loc 1 144 13 view .LVU473
 1987 0136 0133     		adds	r3, r3, #1
 1988 0138 164A     		ldr	r2, .L176
 1989 013a 1360     		str	r3, [r2]
 145:src/m3.c      ****             period[2] = handle;
 1990              		.loc 1 145 13 view .LVU474
 145:src/m3.c      ****             period[2] = handle;
ARM GAS  build/m3.s 			page 49


 1991              		.loc 1 145 23 is_stmt 0 view .LVU475
 1992 013c 184B     		ldr	r3, .L176+12
 1993 013e 9970     		strb	r1, [r3, #2]
 146:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1994              		.loc 1 146 13 is_stmt 1 view .LVU476
 1995 0140 1848     		ldr	r0, .L176+16
 1996              	.LVL181:
 146:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 1997              		.loc 1 146 13 is_stmt 0 view .LVU477
 1998 0142 FFF7FEFF 		bl	circbuffer_queue
 1999              	.LVL182:
 147:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 2000              		.loc 1 147 13 is_stmt 1 view .LVU478
 2001 0146 1848     		ldr	r0, .L176+20
 2002 0148 FFF7FEFF 		bl	usart_enable_tx_interrupt
 2003              	.LVL183:
 148:src/m3.c      ****             break;
 2004              		.loc 1 148 13 view .LVU479
 2005 014c A7E7     		b	.L144
 2006              	.LVL184:
 2007              	.L156:
 150:src/m3.c      ****             myCase = 0;
 2008              		.loc 1 150 13 view .LVU480
 150:src/m3.c      ****             myCase = 0;
 2009              		.loc 1 150 20 is_stmt 0 view .LVU481
 2010 014e 0024     		movs	r4, #0
 2011 0150 104B     		ldr	r3, .L176
 2012 0152 1C60     		str	r4, [r3]
 151:src/m3.c      ****             period[3] = handle;
 2013              		.loc 1 151 13 is_stmt 1 view .LVU482
 151:src/m3.c      ****             period[3] = handle;
 2014              		.loc 1 151 23 is_stmt 0 view .LVU483
 2015 0154 124D     		ldr	r5, .L176+12
 2016 0156 E970     		strb	r1, [r5, #3]
 152:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 2017              		.loc 1 152 13 is_stmt 1 view .LVU484
 2018 0158 1248     		ldr	r0, .L176+16
 2019              	.LVL185:
 152:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 2020              		.loc 1 152 13 is_stmt 0 view .LVU485
 2021 015a FFF7FEFF 		bl	circbuffer_queue
 2022              	.LVL186:
 153:src/m3.c      ****             fixPeriod(period);
 2023              		.loc 1 153 13 is_stmt 1 view .LVU486
 2024 015e 2846     		mov	r0, r5
 2025 0160 FFF7FEFF 		bl	fixPeriod
 2026              	.LVL187:
 154:src/m3.c      ****             for (int i = 0; i < 4; i++)
 2027              		.loc 1 154 13 view .LVU487
 2028              	.LBB6:
 154:src/m3.c      ****             for (int i = 0; i < 4; i++)
 2029              		.loc 1 154 18 view .LVU488
 154:src/m3.c      ****             for (int i = 0; i < 4; i++)
 2030              		.loc 1 154 22 is_stmt 0 view .LVU489
 2031 0164 2346     		mov	r3, r4
 154:src/m3.c      ****             for (int i = 0; i < 4; i++)
 2032              		.loc 1 154 13 view .LVU490
ARM GAS  build/m3.s 			page 50


 2033 0166 04E0     		b	.L168
 2034              	.LVL188:
 2035              	.L169:
 156:src/m3.c      ****                   lastPeriod[i] = period[i];
 2036              		.loc 1 156 19 is_stmt 1 discriminator 3 view .LVU491
 156:src/m3.c      ****                   lastPeriod[i] = period[i];
 2037              		.loc 1 156 41 is_stmt 0 discriminator 3 view .LVU492
 2038 0168 0D4A     		ldr	r2, .L176+12
 2039 016a D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 156:src/m3.c      ****                   lastPeriod[i] = period[i];
 2040              		.loc 1 156 33 discriminator 3 view .LVU493
 2041 016c 0B4A     		ldr	r2, .L176+8
 2042 016e D154     		strb	r1, [r2, r3]
 154:src/m3.c      ****             for (int i = 0; i < 4; i++)
 2043              		.loc 1 154 37 is_stmt 1 discriminator 3 view .LVU494
 2044 0170 0133     		adds	r3, r3, #1
 2045              	.LVL189:
 2046              	.L168:
 154:src/m3.c      ****             for (int i = 0; i < 4; i++)
 2047              		.loc 1 154 31 discriminator 1 view .LVU495
 2048 0172 032B     		cmp	r3, #3
 2049 0174 F8DD     		ble	.L169
 2050              	.LBE6:
 158:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 2051              		.loc 1 158 13 view .LVU496
 2052 0176 0C48     		ldr	r0, .L176+20
 2053 0178 FFF7FEFF 		bl	usart_enable_tx_interrupt
 2054              	.LVL190:
 159:src/m3.c      ****             break;
 2055              		.loc 1 159 13 view .LVU497
 2056 017c 8FE7     		b	.L144
 2057              	.LVL191:
 2058              	.L154:
 161:src/m3.c      ****             myCase = 3;
 2059              		.loc 1 161 13 view .LVU498
 161:src/m3.c      ****             myCase = 3;
 2060              		.loc 1 161 20 is_stmt 0 view .LVU499
 2061 017e 054B     		ldr	r3, .L176
 2062 0180 0322     		movs	r2, #3
 2063 0182 1A60     		str	r2, [r3]
 162:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 2064              		.loc 1 162 13 is_stmt 1 view .LVU500
 2065 0184 0748     		ldr	r0, .L176+16
 2066              	.LVL192:
 162:src/m3.c      ****             circbuffer_queue(&circBufferOut, handle);
 2067              		.loc 1 162 13 is_stmt 0 view .LVU501
 2068 0186 FFF7FEFF 		bl	circbuffer_queue
 2069              	.LVL193:
 163:src/m3.c      ****             usart_enable_tx_interrupt(USART2);
 2070              		.loc 1 163 13 is_stmt 1 view .LVU502
 2071 018a 0748     		ldr	r0, .L176+20
 2072 018c FFF7FEFF 		bl	usart_enable_tx_interrupt
 2073              	.LVL194:
 164:src/m3.c      ****             break;
 2074              		.loc 1 164 13 view .LVU503
 2075 0190 85E7     		b	.L144
 2076              	.L177:
ARM GAS  build/m3.s 			page 51


 2077 0192 00BF     		.align	2
 2078              	.L176:
 2079 0194 00000000 		.word	myCase.2
 2080 0198 00000000 		.word	.LC9
 2081 019c 00000000 		.word	lastPeriod.1
 2082 01a0 00000000 		.word	period.0
 2083 01a4 00000000 		.word	circBufferOut
 2084 01a8 00440040 		.word	1073759232
 2085              		.cfi_endproc
 2086              	.LFE24:
 2088              		.section	.text.main,"ax",%progbits
 2089              		.align	1
 2090              		.global	main
 2091              		.syntax unified
 2092              		.thumb
 2093              		.thumb_func
 2095              	main:
 2096              	.LFB23:
  45:src/m3.c      **** int main(void)  {
 2097              		.loc 1 45 16 view -0
 2098              		.cfi_startproc
 2099              		@ Volatile: function does not return.
 2100              		@ args = 0, pretend = 0, frame = 8
 2101              		@ frame_needed = 0, uses_anonymous_args = 0
 2102 0000 00B5     		push	{lr}
 2103              	.LCFI32:
 2104              		.cfi_def_cfa_offset 4
 2105              		.cfi_offset 14, -4
 2106 0002 83B0     		sub	sp, sp, #12
 2107              	.LCFI33:
 2108              		.cfi_def_cfa_offset 16
  47:src/m3.c      ****    circbuffer_init(&circBufferIn, bufferI, max);
 2109              		.loc 1 47 4 view .LVU505
 2110 0004 4FF48062 		mov	r2, #1024
 2111 0008 1B49     		ldr	r1, .L182
 2112 000a 1C48     		ldr	r0, .L182+4
 2113 000c FFF7FEFF 		bl	circbuffer_init
 2114              	.LVL195:
  48:src/m3.c      ****    circbuffer_init(&circBufferOut, bufferO, max);
 2115              		.loc 1 48 4 view .LVU506
 2116 0010 4FF48062 		mov	r2, #1024
 2117 0014 1A49     		ldr	r1, .L182+8
 2118 0016 1B48     		ldr	r0, .L182+12
 2119 0018 FFF7FEFF 		bl	circbuffer_init
 2120              	.LVL196:
  51:src/m3.c      ****    clock_enable();
 2121              		.loc 1 51 4 view .LVU507
 2122 001c FFF7FEFF 		bl	clock_enable
 2123              	.LVL197:
  52:src/m3.c      ****    usart_setup(); 
 2124              		.loc 1 52 4 view .LVU508
 2125 0020 FFF7FEFF 		bl	usart_setup
 2126              	.LVL198:
  53:src/m3.c      ****    timer_setup();
 2127              		.loc 1 53 4 view .LVU509
 2128 0024 FFF7FEFF 		bl	timer_setup
 2129              	.LVL199:
ARM GAS  build/m3.s 			page 52


  55:src/m3.c      ****    rcc_periph_clock_enable(RCC_GPIOA);
 2130              		.loc 1 55 4 view .LVU510
 2131 0028 4FF41860 		mov	r0, #2432
 2132 002c FFF7FEFF 		bl	rcc_periph_clock_enable
 2133              	.LVL200:
  56:src/m3.c      ****    rcc_periph_clock_enable(RCC_GPIOC);
 2134              		.loc 1 56 4 view .LVU511
 2135 0030 40F68210 		movw	r0, #2434
 2136 0034 FFF7FEFF 		bl	rcc_periph_clock_enable
 2137              	.LVL201:
  57:src/m3.c      ****    gpio_mode_setup(GPIOA, GPIO_MODE_OUTPUT, GPIO_PUPD_PULLUP, GPIO5);
 2138              		.loc 1 57 4 view .LVU512
 2139 0038 2023     		movs	r3, #32
 2140 003a 0122     		movs	r2, #1
 2141 003c 1146     		mov	r1, r2
 2142 003e 4FF09040 		mov	r0, #1207959552
 2143 0042 FFF7FEFF 		bl	gpio_mode_setup
 2144              	.LVL202:
  58:src/m3.c      ****    gpio_mode_setup(GPIOC, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, GPIO13);
 2145              		.loc 1 58 4 view .LVU513
 2146 0046 4FF40053 		mov	r3, #8192
 2147 004a 0122     		movs	r2, #1
 2148 004c 0021     		movs	r1, #0
 2149 004e 0E48     		ldr	r0, .L182+16
 2150 0050 FFF7FEFF 		bl	gpio_mode_setup
 2151              	.LVL203:
 2152              	.L179:
  61:src/m3.c      ****    while(true)
 2153              		.loc 1 61 4 view .LVU514
  63:src/m3.c      ****       if(!bufferIsEmpty(&circBufferIn))
 2154              		.loc 1 63 7 view .LVU515
  63:src/m3.c      ****       if(!bufferIsEmpty(&circBufferIn))
 2155              		.loc 1 63 11 is_stmt 0 view .LVU516
 2156 0054 0948     		ldr	r0, .L182+4
 2157 0056 FFF7FEFF 		bl	bufferIsEmpty
 2158              	.LVL204:
  63:src/m3.c      ****       if(!bufferIsEmpty(&circBufferIn))
 2159              		.loc 1 63 9 view .LVU517
 2160 005a 0028     		cmp	r0, #0
 2161 005c FAD1     		bne	.L179
 2162              	.LBB7:
  65:src/m3.c      ****             char charSending = '\0';
 2163              		.loc 1 65 13 is_stmt 1 view .LVU518
  65:src/m3.c      ****             char charSending = '\0';
 2164              		.loc 1 65 18 is_stmt 0 view .LVU519
 2165 005e 0023     		movs	r3, #0
 2166 0060 8DF80730 		strb	r3, [sp, #7]
  66:src/m3.c      ****             circbuffer_dequeue(&circBufferIn, &charSending);
 2167              		.loc 1 66 13 is_stmt 1 view .LVU520
 2168 0064 0DF10701 		add	r1, sp, #7
 2169 0068 0448     		ldr	r0, .L182+4
 2170 006a FFF7FEFF 		bl	circbuffer_dequeue
 2171              	.LVL205:
  67:src/m3.c      ****             charHandler(charSending);
 2172              		.loc 1 67 13 view .LVU521
 2173 006e 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2174 0072 FFF7FEFF 		bl	charHandler
ARM GAS  build/m3.s 			page 53


 2175              	.LVL206:
 2176 0076 EDE7     		b	.L179
 2177              	.L183:
 2178              		.align	2
 2179              	.L182:
 2180 0078 00000000 		.word	bufferI
 2181 007c 00000000 		.word	circBufferIn
 2182 0080 00000000 		.word	bufferO
 2183 0084 00000000 		.word	circBufferOut
 2184 0088 00080048 		.word	1207961600
 2185              	.LBE7:
 2186              		.cfi_endproc
 2187              	.LFE23:
 2189              		.section	.data.period.0,"aw"
 2190              		.align	2
 2193              	period.0:
 2194 0000 31303030 		.ascii	"1000"
 2195              		.section	.data.lastPeriod.1,"aw"
 2196              		.align	2
 2199              	lastPeriod.1:
 2200 0000 31303030 		.ascii	"1000"
 2201              		.section	.bss.myCase.2,"aw",%nobits
 2202              		.align	2
 2205              	myCase.2:
 2206 0000 00000000 		.space	4
 2207              		.section	.bss.pos.3,"aw",%nobits
 2210              	pos.3:
 2211 0000 00       		.space	1
 2212              		.section	.bss.pos.4,"aw",%nobits
 2215              	pos.4:
 2216 0000 00       		.space	1
 2217              		.section	.rodata.__func__.5,"a"
 2218              		.align	2
 2221              	__func__.5:
 2222 0000 63697263 		.ascii	"circbuff_recent\000"
 2222      62756666 
 2222      5F726563 
 2222      656E7400 
 2223              		.section	.rodata.__func__.6,"a"
 2224              		.align	2
 2227              	__func__.6:
 2228 0000 6261636B 		.ascii	"backPointer\000"
 2228      506F696E 
 2228      74657200 
 2229              		.section	.rodata.__func__.7,"a"
 2230              		.align	2
 2233              	__func__.7:
 2234 0000 63697263 		.ascii	"circbuffer_dequeue\000"
 2234      62756666 
 2234      65725F64 
 2234      65717565 
 2234      756500
 2235              		.section	.rodata.__func__.8,"a"
 2236              		.align	2
 2239              	__func__.8:
 2240 0000 61647661 		.ascii	"advancePointer\000"
 2240      6E636550 
ARM GAS  build/m3.s 			page 54


 2240      6F696E74 
 2240      657200
 2241              		.section	.rodata.__func__.9,"a"
 2242              		.align	2
 2245              	__func__.9:
 2246 0000 63697263 		.ascii	"circbuffer_queue\000"
 2246      62756666 
 2246      65725F71 
 2246      75657565 
 2246      00
 2247              		.section	.rodata.__func__.10,"a"
 2248              		.align	2
 2251              	__func__.10:
 2252 0000 63697263 		.ascii	"circbuff_entries\000"
 2252      62756666 
 2252      5F656E74 
 2252      72696573 
 2252      00
 2253              		.section	.rodata.__func__.11,"a"
 2254              		.align	2
 2257              	__func__.11:
 2258 0000 62756666 		.ascii	"bufferIsFull\000"
 2258      65724973 
 2258      46756C6C 
 2258      00
 2259              		.section	.rodata.__func__.12,"a"
 2260              		.align	2
 2263              	__func__.12:
 2264 0000 63697263 		.ascii	"circbuffer_init\000"
 2264      62756666 
 2264      65725F69 
 2264      6E697400 
 2265              		.section	.rodata.__func__.13,"a"
 2266              		.align	2
 2269              	__func__.13:
 2270 0000 62756666 		.ascii	"bufferIsEmpty\000"
 2270      65724973 
 2270      456D7074 
 2270      7900
 2271              		.section	.rodata.__func__.14,"a"
 2272              		.align	2
 2275              	__func__.14:
 2276 0000 63697263 		.ascii	"circbuffer_reset\000"
 2276      62756666 
 2276      65725F72 
 2276      65736574 
 2276      00
 2277              		.global	max
 2278              		.section	.rodata.max,"a"
 2279              		.align	2
 2282              	max:
 2283 0000 00040000 		.word	1024
 2284              		.global	globalPeriod
 2285              		.section	.data.globalPeriod,"aw"
 2286              		.align	1
 2289              	globalPeriod:
 2290 0000 E803     		.short	1000
ARM GAS  build/m3.s 			page 55


 2291              		.global	bufferO
 2292              		.section	.bss.bufferO,"aw",%nobits
 2293              		.align	2
 2296              	bufferO:
 2297 0000 00000000 		.space	256
 2297      00000000 
 2297      00000000 
 2297      00000000 
 2297      00000000 
 2298              		.global	bufferI
 2299              		.section	.bss.bufferI,"aw",%nobits
 2300              		.align	2
 2303              	bufferI:
 2304 0000 00000000 		.space	256
 2304      00000000 
 2304      00000000 
 2304      00000000 
 2304      00000000 
 2305              		.global	circBufferOut
 2306              		.section	.bss.circBufferOut,"aw",%nobits
 2307              		.align	2
 2310              	circBufferOut:
 2311 0000 00000000 		.space	8
 2311      00000000 
 2312              		.global	circBufferIn
 2313              		.section	.bss.circBufferIn,"aw",%nobits
 2314              		.align	2
 2317              	circBufferIn:
 2318 0000 00000000 		.space	8
 2318      00000000 
 2319              		.global	key
 2320              		.section	.rodata.key,"a"
 2321              		.align	2
 2324              	key:
 2325 0000 424F4C44 		.ascii	"BOLDFEARLESSCONFIDENT"
 2325      46454152 
 2325      4C455353 
 2325      434F4E46 
 2325      4944454E 
 2326              		.text
 2327              	.Letext0:
 2328              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2329              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2330              		.file 6 "/home/tatew/libopencm3/include/libopencm3/stm32/l4/rcc.h"
 2331              		.file 7 "/home/tatew/libopencm3/include/libopencm3/stm32/common/usart_common_all.h"
 2332              		.file 8 "/home/tatew/libopencm3/include/libopencm3/stm32/common/gpio_common_all.h"
 2333              		.file 9 "/usr/arm-none-eabi/include/stdio.h"
 2334              		.file 10 "/home/tatew/libopencm3/include/libopencm3/stm32/common/timer_common_all.h"
 2335              		.file 11 "/home/tatew/libopencm3/include/libopencm3/stm32/common/rcc_common_all.h"
 2336              		.file 12 "/home/tatew/libopencm3/include/libopencm3/stm32/common/gpio_common_f234.h"
 2337              		.file 13 "/home/tatew/libopencm3/include/libopencm3/cm3/nvic.h"
 2338              		.file 14 "/usr/arm-none-eabi/include/assert.h"
 2339              		.file 15 "/usr/arm-none-eabi/include/sys/errno.h"
ARM GAS  build/m3.s 			page 56


DEFINED SYMBOLS
                            *ABS*:00000000 m3.c
          build/m3.s:21     .rodata.advancePointer.str1.4:00000000 $d
          build/m3.s:28     .text.advancePointer:00000000 $t
          build/m3.s:33     .text.advancePointer:00000000 advancePointer
          build/m3.s:123    .text.advancePointer:00000050 $d
          build/m3.s:2239   .rodata.__func__.8:00000000 __func__.8
          build/m3.s:130    .text.backPointer:00000000 $t
          build/m3.s:135    .text.backPointer:00000000 backPointer
          build/m3.s:191    .text.backPointer:0000002c $d
          build/m3.s:2227   .rodata.__func__.6:00000000 __func__.6
          build/m3.s:198    .text.clock_enable:00000000 $t
          build/m3.s:203    .text.clock_enable:00000000 clock_enable
          build/m3.s:262    .text.usart_setup:00000000 $t
          build/m3.s:267    .text.usart_setup:00000000 usart_setup
          build/m3.s:352    .text.usart_setup:00000080 $d
          build/m3.s:357    .text.timer_setup:00000000 $t
          build/m3.s:362    .text.timer_setup:00000000 timer_setup
          build/m3.s:406    .text.circbuffer_reset:00000000 $t
          build/m3.s:412    .text.circbuffer_reset:00000000 circbuffer_reset
          build/m3.s:453    .text.circbuffer_reset:0000001c $d
          build/m3.s:2275   .rodata.__func__.14:00000000 __func__.14
          build/m3.s:460    .text.bufferIsEmpty:00000000 $t
          build/m3.s:466    .text.bufferIsEmpty:00000000 bufferIsEmpty
          build/m3.s:527    .text.bufferIsEmpty:00000028 $d
          build/m3.s:2269   .rodata.__func__.13:00000000 __func__.13
          build/m3.s:534    .rodata.circbuffer_init.str1.4:00000000 $d
          build/m3.s:541    .text.circbuffer_init:00000000 $t
          build/m3.s:547    .text.circbuffer_init:00000000 circbuffer_init
          build/m3.s:612    .text.circbuffer_init:00000034 $d
          build/m3.s:2263   .rodata.__func__.12:00000000 __func__.12
          build/m3.s:620    .text.bufferIsFull:00000000 $t
          build/m3.s:626    .text.bufferIsFull:00000000 bufferIsFull
          build/m3.s:662    .text.bufferIsFull:00000014 $d
          build/m3.s:2257   .rodata.__func__.11:00000000 __func__.11
          build/m3.s:669    .text.circbuff_entries:00000000 $t
          build/m3.s:675    .text.circbuff_entries:00000000 circbuff_entries
          build/m3.s:746    .text.circbuff_entries:00000030 $d
          build/m3.s:2251   .rodata.__func__.10:00000000 __func__.10
          build/m3.s:753    .rodata.circbuffer_queue.str1.4:00000000 $d
          build/m3.s:757    .text.circbuffer_queue:00000000 $t
          build/m3.s:763    .text.circbuffer_queue:00000000 circbuffer_queue
          build/m3.s:812    .text.circbuffer_queue:00000024 $d
          build/m3.s:2245   .rodata.__func__.9:00000000 __func__.9
          build/m3.s:819    .rodata.circbuffer_dequeue.str1.4:00000000 $d
          build/m3.s:826    .text.circbuffer_dequeue:00000000 $t
          build/m3.s:832    .text.circbuffer_dequeue:00000000 circbuffer_dequeue
          build/m3.s:931    .text.circbuffer_dequeue:0000004c $d
          build/m3.s:2233   .rodata.__func__.7:00000000 __func__.7
          build/m3.s:940    .rodata.circbuff_recent.str1.4:00000000 $d
          build/m3.s:944    .text.circbuff_recent:00000000 $t
          build/m3.s:950    .text.circbuff_recent:00000000 circbuff_recent
          build/m3.s:1050   .text.circbuff_recent:00000048 $d
          build/m3.s:2221   .rodata.__func__.5:00000000 __func__.5
          build/m3.s:1057   .text.usart_isr:00000000 $t
          build/m3.s:1063   .text.usart_isr:00000000 usart_isr
          build/m3.s:1165   .text.usart_isr:0000007c $d
ARM GAS  build/m3.s 			page 57


          build/m3.s:2317   .bss.circBufferIn:00000000 circBufferIn
          build/m3.s:2310   .bss.circBufferOut:00000000 circBufferOut
          build/m3.s:1172   .text.timer_isr:00000000 $t
          build/m3.s:1178   .text.timer_isr:00000000 timer_isr
          build/m3.s:1222   .text.timer_isr:00000034 $d
          build/m3.s:2289   .data.globalPeriod:00000000 globalPeriod
          build/m3.s:1227   .text.convertCaps:00000000 $t
          build/m3.s:1233   .text.convertCaps:00000000 convertCaps
          build/m3.s:1262   .text.encrypt:00000000 $t
          build/m3.s:1268   .text.encrypt:00000000 encrypt
          build/m3.s:1320   .text.encrypt:00000034 $d
          build/m3.s:2215   .bss.pos.4:00000000 pos.4
          build/m3.s:2324   .rodata.key:00000000 key
          build/m3.s:1327   .text.decrypt:00000000 $t
          build/m3.s:1333   .text.decrypt:00000000 decrypt
          build/m3.s:1400   .text.decrypt:00000040 $d
          build/m3.s:2210   .bss.pos.3:00000000 pos.3
          build/m3.s:1407   .text._write:00000000 $t
          build/m3.s:1413   .text._write:00000000 _write
          build/m3.s:1489   .text._write:00000040 $d
          build/m3.s:1494   .text.cipherHandler:00000000 $t
          build/m3.s:1500   .text.cipherHandler:00000000 cipherHandler
          build/m3.s:1568   .text.cipherHandler:0000004c $d
          build/m3.s:1575   .rodata.fixPeriod.str1.4:00000000 $d
          build/m3.s:1579   .text.fixPeriod:00000000 $t
          build/m3.s:1585   .text.fixPeriod:00000000 fixPeriod
          build/m3.s:1652   .text.fixPeriod:0000003c $d
          build/m3.s:1658   .rodata.charHandler.str1.4:00000000 $d
          build/m3.s:1662   .text.charHandler:00000000 $t
          build/m3.s:1668   .text.charHandler:00000000 charHandler
          build/m3.s:1727   .text.charHandler:0000002e $d
          build/m3.s:2079   .text.charHandler:00000194 $d
          build/m3.s:2205   .bss.myCase.2:00000000 myCase.2
          build/m3.s:2199   .data.lastPeriod.1:00000000 lastPeriod.1
          build/m3.s:2193   .data.period.0:00000000 period.0
          build/m3.s:2089   .text.main:00000000 $t
          build/m3.s:2095   .text.main:00000000 main
          build/m3.s:2180   .text.main:00000078 $d
          build/m3.s:2303   .bss.bufferI:00000000 bufferI
          build/m3.s:2296   .bss.bufferO:00000000 bufferO
          build/m3.s:2190   .data.period.0:00000000 $d
          build/m3.s:2196   .data.lastPeriod.1:00000000 $d
          build/m3.s:2202   .bss.myCase.2:00000000 $d
          build/m3.s:2211   .bss.pos.3:00000000 $d
          build/m3.s:2216   .bss.pos.4:00000000 $d
          build/m3.s:2218   .rodata.__func__.5:00000000 $d
          build/m3.s:2224   .rodata.__func__.6:00000000 $d
          build/m3.s:2230   .rodata.__func__.7:00000000 $d
          build/m3.s:2236   .rodata.__func__.8:00000000 $d
          build/m3.s:2242   .rodata.__func__.9:00000000 $d
          build/m3.s:2248   .rodata.__func__.10:00000000 $d
          build/m3.s:2254   .rodata.__func__.11:00000000 $d
          build/m3.s:2260   .rodata.__func__.12:00000000 $d
          build/m3.s:2266   .rodata.__func__.13:00000000 $d
          build/m3.s:2272   .rodata.__func__.14:00000000 $d
          build/m3.s:2282   .rodata.max:00000000 max
          build/m3.s:2279   .rodata.max:00000000 $d
ARM GAS  build/m3.s 			page 58


          build/m3.s:2286   .data.globalPeriod:00000000 $d
          build/m3.s:2293   .bss.bufferO:00000000 $d
          build/m3.s:2300   .bss.bufferI:00000000 $d
          build/m3.s:2307   .bss.circBufferOut:00000000 $d
          build/m3.s:2314   .bss.circBufferIn:00000000 $d
          build/m3.s:2321   .rodata.key:00000000 $d
          build/m3.s:1738   .text.charHandler:00000039 $d
          build/m3.s:1738   .text.charHandler:0000003a $t

UNDEFINED SYMBOLS
__assert_func
rcc_osc_on
rcc_set_main_pll
rcc_periph_clock_enable
nvic_enable_irq
gpio_mode_setup
gpio_set_af
usart_set_baudrate
usart_set_databits
usart_set_stopbits
usart_set_mode
usart_set_parity
usart_set_flow_control
usart_enable_rx_interrupt
usart_enable
rcc_periph_reset_pulse
timer_set_prescaler
timer_set_period
timer_enable_counter
timer_enable_irq
usart_get_flag
usart_recv
usart_send
usart_disable_tx_interrupt
timer_get_flag
timer_clear_flag
gpio_toggle
usart_send_blocking
__errno
gpio_get
usart_enable_tx_interrupt
atoi
printf
